{
    "docs": [
        {
            "location": "/", 
            "text": "MongoDB PHP Library\n\n\nThis library provides a high-level abstraction around the lower-level\n\nPHP driver\n (i.e. the \nmongodb\n extension).\n\n\nWhile the extension provides a limited API for executing commands, queries, and\nwrite operations, this library implements an API similar to that of the\n\nlegacy PHP driver\n. It contains\nabstractions for client, database, and collection objects, and provides methods\nfor CRUD operations and common commands (e.g. index and collection management).\nSupport for GridFS is forthcoming.\n\n\nIf you are developing an application with MongoDB, you should consider using\nthis library, or another high-level abstraction, instead of the extension alone.\n\n\nFor additional information about this library and the \nmongodb\n extension,\nsee the \nArchitecture Overview\n\narticle in the driver documentation. \nDerick Rethans\n\nhas also written a series of blog posts entitled \nNew MongoDB Drivers for PHP\nand HHVM\n:\n\n\n\n\nPart One: History\n\n\nPart Two: Architecture\n\n\nPart Three: Cursor Behaviour\n\n\n\n\nAPI Documentation\n\n\nGenerated API documentation for the library is available at:\n\n\n\n\nhttp://mongodb.github.io/mongo-php-library/api\n\n\n\n\nMongoDB Tutorial\n\n\nIf you are a new MongoDB user, these links should help you become more familiar\nwith MongoDB and introduce some of the concepts and terms you will encounter in\nthis documentation:\n\n\n\n\nIntroduction to CRUD operations in MongoDB\n\n\nWhat is a MongoDB document?\n\n\nMongoDB\ns \ndot notation\n for accessing document properties\n\n\nObjectId: MongoDB\ns document identifier", 
            "title": "Home"
        }, 
        {
            "location": "/#mongodb-php-library", 
            "text": "This library provides a high-level abstraction around the lower-level PHP driver  (i.e. the  mongodb  extension).  While the extension provides a limited API for executing commands, queries, and\nwrite operations, this library implements an API similar to that of the legacy PHP driver . It contains\nabstractions for client, database, and collection objects, and provides methods\nfor CRUD operations and common commands (e.g. index and collection management).\nSupport for GridFS is forthcoming.  If you are developing an application with MongoDB, you should consider using\nthis library, or another high-level abstraction, instead of the extension alone.  For additional information about this library and the  mongodb  extension,\nsee the  Architecture Overview \narticle in the driver documentation.  Derick Rethans \nhas also written a series of blog posts entitled  New MongoDB Drivers for PHP\nand HHVM :   Part One: History  Part Two: Architecture  Part Three: Cursor Behaviour", 
            "title": "MongoDB PHP Library"
        }, 
        {
            "location": "/#api-documentation", 
            "text": "Generated API documentation for the library is available at:   http://mongodb.github.io/mongo-php-library/api", 
            "title": "API Documentation"
        }, 
        {
            "location": "/#mongodb-tutorial", 
            "text": "If you are a new MongoDB user, these links should help you become more familiar\nwith MongoDB and introduce some of the concepts and terms you will encounter in\nthis documentation:   Introduction to CRUD operations in MongoDB  What is a MongoDB document?  MongoDB s  dot notation  for accessing document properties  ObjectId: MongoDB s document identifier", 
            "title": "MongoDB Tutorial"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting Started\n\n\nRequirements\n\n\nSince this library is only a high-level abstraction for the driver, it requires\nthat the \nmongodb\n extension be installed:\n\n\n$ pecl install mongodb\n$ echo \nextension=mongodb.so\n \n `php --ini | grep \nLoaded Configuration\n | sed -e \ns|.*:\\s*||\n`\n\n\n\n\nInstructions for installing the \nmongodb\n extension on HHVM may be found in the\n\nInstallation with HHVM\n\narticle in the driver documentation.\n\n\nInstallation\n\n\nThe preferred method of installing this library is with\n\nComposer\n by running the following from your project\nroot:\n\n\n$ composer require \nmongodb/mongodb=^1.0.0\n\n\n\n\n\nWhile not recommended, the package may also be installed manually via source\ntarballs attached to\n\nGitHub releases\n.\n\n\nConfigure Autoloading\n\n\nOnce the library is installed, ensure that your application includes Composer\ns\nautoloader.\n\n\n// This path should point to Composer's autoloader\nrequire_once __DIR__ . \n/vendor/autoload.php\n;\n\n\n\n\nMore information on this setup may be found in Composer\ns\nautoloading documentation\n.\n\n\nIf you have installed the package manually (e.g. from a source tarball), you\nwill likely need configure autoloading manually:\n\n\n\n\nMap the top-level \nMongoDB\\\n namespace to the \nsrc/\n directory using your\n   preferred autoloader implementation\n\n\nManually require the \nsrc/functions.php\n file, since PHP does not yet support\n   function autoloading", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "Requirements  Since this library is only a high-level abstraction for the driver, it requires\nthat the  mongodb  extension be installed:  $ pecl install mongodb\n$ echo  extension=mongodb.so    `php --ini | grep  Loaded Configuration  | sed -e  s|.*:\\s*|| `  Instructions for installing the  mongodb  extension on HHVM may be found in the Installation with HHVM \narticle in the driver documentation.  Installation  The preferred method of installing this library is with Composer  by running the following from your project\nroot:  $ composer require  mongodb/mongodb=^1.0.0   While not recommended, the package may also be installed manually via source\ntarballs attached to GitHub releases .  Configure Autoloading  Once the library is installed, ensure that your application includes Composer s\nautoloader.  // This path should point to Composer's autoloader\nrequire_once __DIR__ .  /vendor/autoload.php ;  More information on this setup may be found in Composer s autoloading documentation .  If you have installed the package manually (e.g. from a source tarball), you\nwill likely need configure autoloading manually:   Map the top-level  MongoDB\\  namespace to the  src/  directory using your\n   preferred autoloader implementation  Manually require the  src/functions.php  file, since PHP does not yet support\n   function autoloading", 
            "title": "Getting Started"
        }, 
        {
            "location": "/upgrade-guide/", 
            "text": "Upgrade Guide\n\n\nThe MongoDB PHP Library and underlying \nmongodb extension\n have\nnotable API differences from the legacy \nmongo extension\n. This page\nwill attempt to summarize those differences for the benefit of those upgrading \nrom the legacy driver.\n\n\nAdditionally, a community-developed \nmongo-php-adapter\n library exists,\nwhich implements the \nmongo extension\n API using this library and the\nnew driver. While this adapter library is not officially supported by MongoDB,\nit does bear mentioning.\n\n\nCollection API\n\n\nThis library\ns \nMongoDB\\Collection\n class implements MongoDB\ns\ncross-driver \nCRUD\n and \nIndex Management\n\nspecifications. Although some method names have changed in accordance with the\nnew specifications, the new class provides the same functionality as the legacy\ndriver\ns \nMongoCollection\n class with some notable exceptions.\n\n\nOld and New Methods\n\n\n\n\n\n\n\n\nMongoCollection\n\n\nMongoDB\\Collection\n\n\n\n\n\n\n\n\n\n\naggregate()\n\n\naggregate()\n\n\n\n\n\n\naggregateCursor()\n\n\naggregate()\n\n\n\n\n\n\nbatchInsert()\n\n\ninsertMany()\n\n\n\n\n\n\ncount()\n\n\ncount()\n\n\n\n\n\n\ncreateDBRef()\n\n\nNot yet implemented (\nPHPLIB-24\n)\n\n\n\n\n\n\ncreateIndex()\n\n\ncreateIndex()\n\n\n\n\n\n\ndeleteIndex()\n\n\ndropIndex()\n\n\n\n\n\n\ndeleteIndexes()\n\n\ndropIndexes()\n\n\n\n\n\n\ndrop()\n\n\ndrop()\n\n\n\n\n\n\ndistinct()\n\n\ndistinct()\n\n\n\n\n\n\nensureIndex()\n\n\ncreateIndex()\n\n\n\n\n\n\nfind()\n\n\nfind()\n\n\n\n\n\n\nfindAndModify()\n\n\nfindOneAndDelete()\n, \nfindOneAndReplace()\n, and \nfindOneAndUpdate()\n\n\n\n\n\n\nfindOne()\n\n\nfindOne()\n\n\n\n\n\n\ngetDBRef()\n\n\nNot yet implemented (\nPHPLIB-24\n)\n\n\n\n\n\n\ngetIndexInfo()\n\n\nlistIndexes()\n\n\n\n\n\n\ngetName()\n\n\ngetCollectionName()\n\n\n\n\n\n\ngetReadPreference()\n\n\nNot implemented\n\n\n\n\n\n\ngetSlaveOkay()\n\n\nNot implemented\n\n\n\n\n\n\ngetWriteConcern()\n\n\nNot implemented\n\n\n\n\n\n\ngroup()\n\n\nNot yet implemented (\nPHPLIB-177\n). Use \nDatabase::command()\n for now.\n\n\n\n\n\n\ninsert()\n\n\ninsertOne()\n\n\n\n\n\n\nparallelCollectionScan()\n\n\nNot implemented\n\n\n\n\n\n\nremove()\n\n\ndeleteMany()\n and \ndeleteOne()\n\n\n\n\n\n\nsave()\n\n\ninsertOne()\n or \nreplaceOne()\n with \nupsert\n option\n\n\n\n\n\n\nsgetReadPreference()\n\n\nNot implemented. Use \nwithOptions()\n.\n\n\n\n\n\n\nsetSlaveOkay()\n\n\nNot implemented\n\n\n\n\n\n\nsetWriteConcern()\n\n\nNot implemented. Use \nwithOptions()\n.\n\n\n\n\n\n\nupdate()\n\n\nreplaceOne()\n, \nupdateMany()\n, and \nupdateOne()\n\n\n\n\n\n\nvalidate()\n\n\nNot implemented\n\n\n\n\n\n\n\n\nA guiding principle in designing the new APIs was that explicit method names\nare preferable to overloaded terms found in the old API. For instance,\n\nMongoCollection::save()\n and \n\nMongoCollection::findAndModify()\n have very different modes of\noperation, depending on their arguments. Methods were also split to distinguish\nbetween \nupdating specific fields\n and\n\nfull-document replacement\n.\n\n\nGroup Command Helper\n\n\nMongoDB\\Collection\n does not yet have a helper method for the\n\ngroup\n command; however, that is planned in \nPHPLIB-177\n.\nThe following example demonstrates how to execute a group command using\n\nDatabase::command()\n:\n\n\n?php\n\n$database = (new MongoDB\\Client)-\nselectDatabase('db_name');\n$cursor = $database-\ncommand([\n    'group' =\n [\n        'ns' =\n 'collection_name',\n        'key' =\n ['field_name' =\n 1],\n        'initial' =\n ['total' =\n 0],\n        '$reduce' =\n new MongoDB\\BSON\\Javascript('...'),\n    ],\n]);\n\n$resultDocument = $cursor-\ntoArray()[0];\n\n\n\n\nMapReduce Command Helper\n\n\nMongoDB\\Collection\n does not yet have a helper method for the\n\nmapReduce\n command; however, that is planned in\n\nPHPLIB-53\n. The following example demonstrates how to execute a\nmapReduce command using \nDatabase::command()\n:\n\n\n?php\n\n$database = (new MongoDB\\Client)-\nselectDatabase('db_name');\n$cursor = $database-\ncommand([\n    'mapReduce' =\n 'collection_name',\n    'map' =\n new MongoDB\\BSON\\Javascript('...'),\n    'reduce' =\n new MongoDB\\BSON\\Javascript('...'),\n    'out' =\n 'output_collection_name',\n]);\n\n$resultDocument = $cursor-\ntoArray()[0];\n\n\n\n\nDBRef Helpers\n\n\nMongoDB\\Collection\n does not yet have helper methods for working\nwith \nDBRef\n objects; however, that is planned in\n\nPHPLIB-24\n.\n\n\nMongoCollection::save() Removed\n\n\nMongoCollection::save()\n, which was syntactic sugar for an insert or\nupsert operation, has been removed in favor of explicitly using\n\ninsertOne()\n or\n\nreplaceOne()\n (with the \nupsert\n option).\n\n\n\n\nWhile the \nsave()\n method does have its uses for interactive environments,\nsuch as the mongo shell, it was intentionally excluded from the\n\nCRUD\n specification for language drivers. Generally, application\ncode should know if the document has an identifier and be able to explicitly\ninsert or replace the document and handle the returned InsertResult or\nUpdateResult, respectively. This also helps avoid inadvertent and potentially\ndangerous \nfull-document replacements\n.\n\n\nMongoWriteBatch\n\n\nThe legacy driver\ns \nMongoWriteBatch\n classes have been replaced with a\ngeneral-purpose \nbulkWrite()\n method. Whereas\nthe legacy driver only allowed bulk operations of the same time, the new method\nallows operations to be mixed (e.g. inserts, updates, and deletes).", 
            "title": "Upgrade Guide"
        }, 
        {
            "location": "/upgrade-guide/#upgrade-guide", 
            "text": "The MongoDB PHP Library and underlying  mongodb extension  have\nnotable API differences from the legacy  mongo extension . This page\nwill attempt to summarize those differences for the benefit of those upgrading \nrom the legacy driver.  Additionally, a community-developed  mongo-php-adapter  library exists,\nwhich implements the  mongo extension  API using this library and the\nnew driver. While this adapter library is not officially supported by MongoDB,\nit does bear mentioning.", 
            "title": "Upgrade Guide"
        }, 
        {
            "location": "/upgrade-guide/#collection-api", 
            "text": "This library s  MongoDB\\Collection  class implements MongoDB s\ncross-driver  CRUD  and  Index Management \nspecifications. Although some method names have changed in accordance with the\nnew specifications, the new class provides the same functionality as the legacy\ndriver s  MongoCollection  class with some notable exceptions.  Old and New Methods     MongoCollection  MongoDB\\Collection      aggregate()  aggregate()    aggregateCursor()  aggregate()    batchInsert()  insertMany()    count()  count()    createDBRef()  Not yet implemented ( PHPLIB-24 )    createIndex()  createIndex()    deleteIndex()  dropIndex()    deleteIndexes()  dropIndexes()    drop()  drop()    distinct()  distinct()    ensureIndex()  createIndex()    find()  find()    findAndModify()  findOneAndDelete() ,  findOneAndReplace() , and  findOneAndUpdate()    findOne()  findOne()    getDBRef()  Not yet implemented ( PHPLIB-24 )    getIndexInfo()  listIndexes()    getName()  getCollectionName()    getReadPreference()  Not implemented    getSlaveOkay()  Not implemented    getWriteConcern()  Not implemented    group()  Not yet implemented ( PHPLIB-177 ). Use  Database::command()  for now.    insert()  insertOne()    parallelCollectionScan()  Not implemented    remove()  deleteMany()  and  deleteOne()    save()  insertOne()  or  replaceOne()  with  upsert  option    sgetReadPreference()  Not implemented. Use  withOptions() .    setSlaveOkay()  Not implemented    setWriteConcern()  Not implemented. Use  withOptions() .    update()  replaceOne() ,  updateMany() , and  updateOne()    validate()  Not implemented     A guiding principle in designing the new APIs was that explicit method names\nare preferable to overloaded terms found in the old API. For instance, MongoCollection::save()  and  MongoCollection::findAndModify()  have very different modes of\noperation, depending on their arguments. Methods were also split to distinguish\nbetween  updating specific fields  and full-document replacement .  Group Command Helper  MongoDB\\Collection  does not yet have a helper method for the group  command; however, that is planned in  PHPLIB-177 .\nThe following example demonstrates how to execute a group command using Database::command() :  ?php\n\n$database = (new MongoDB\\Client)- selectDatabase('db_name');\n$cursor = $database- command([\n    'group' =  [\n        'ns' =  'collection_name',\n        'key' =  ['field_name' =  1],\n        'initial' =  ['total' =  0],\n        '$reduce' =  new MongoDB\\BSON\\Javascript('...'),\n    ],\n]);\n\n$resultDocument = $cursor- toArray()[0];  MapReduce Command Helper  MongoDB\\Collection  does not yet have a helper method for the mapReduce  command; however, that is planned in PHPLIB-53 . The following example demonstrates how to execute a\nmapReduce command using  Database::command() :  ?php\n\n$database = (new MongoDB\\Client)- selectDatabase('db_name');\n$cursor = $database- command([\n    'mapReduce' =  'collection_name',\n    'map' =  new MongoDB\\BSON\\Javascript('...'),\n    'reduce' =  new MongoDB\\BSON\\Javascript('...'),\n    'out' =  'output_collection_name',\n]);\n\n$resultDocument = $cursor- toArray()[0];  DBRef Helpers  MongoDB\\Collection  does not yet have helper methods for working\nwith  DBRef  objects; however, that is planned in PHPLIB-24 .  MongoCollection::save() Removed  MongoCollection::save() , which was syntactic sugar for an insert or\nupsert operation, has been removed in favor of explicitly using insertOne()  or replaceOne()  (with the  upsert  option).   While the  save()  method does have its uses for interactive environments,\nsuch as the mongo shell, it was intentionally excluded from the CRUD  specification for language drivers. Generally, application\ncode should know if the document has an identifier and be able to explicitly\ninsert or replace the document and handle the returned InsertResult or\nUpdateResult, respectively. This also helps avoid inadvertent and potentially\ndangerous  full-document replacements .  MongoWriteBatch  The legacy driver s  MongoWriteBatch  classes have been replaced with a\ngeneral-purpose  bulkWrite()  method. Whereas\nthe legacy driver only allowed bulk operations of the same time, the new method\nallows operations to be mixed (e.g. inserts, updates, and deletes).", 
            "title": "Collection API"
        }, 
        {
            "location": "/tutorial/crud/", 
            "text": "CRUD Operations\n\n\nCRUD is an acronym for Create, Read, Update, and Delete. These operations may be\nperformed via the \nMongoDB\\Collection\n class, which implements\nMongoDB\ns cross-driver \nCRUD specification\n. This page will\ndemonstrate how to insert, query, update, and delete documents using the\nlibrary. A general introduction to CRUD operations in MongoDB may be found in\nthe \nMongoDB Manual\n.\n\n\nQuerying\n\n\nFinding One Document\n\n\nThe \nfindOne()\n method returns the first matched document, or null if\nno document was matched. By default, the library returns BSON documents and\narrays as MongoDB\\Model\\BSONDocument and MongoDB\\Model\\BSONArray objects,\nrespectively. Both of those classes extend PHP\ns \nArrayObject\n\nclass.\n\n\n?php\n\n$collection = (new MongoDB\\Client)-\ndemo-\nzips;\n\n$document = $collection-\nfindOne(['_id' =\n '94301']);\n\nvar_dump($document);\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\BSONDocument)#13 (1) {\n  [\nstorage\n:\nArrayObject\n:private]=\n\n  array(5) {\n    [\n_id\n]=\n\n    string(5) \n94301\n\n    [\ncity\n]=\n\n    string(9) \nPALO ALTO\n\n    [\nloc\n]=\n\n    object(MongoDB\\Model\\BSONArray)#12 (1) {\n      [\nstorage\n:\nArrayObject\n:private]=\n\n      array(2) {\n        [0]=\n\n        float(-122.149685)\n        [1]=\n\n        float(37.444324)\n      }\n    }\n    [\npop\n]=\n\n    int(15965)\n    [\nstate\n]=\n\n    string(2) \nCA\n\n  }\n}\n\n\n\n\nMost methods that read data from MongoDB support a \ntypeMap\n option, which\nallows control over how BSON is converted to PHP. If desired, this option can be\nused to return everything as a PHP array, as was done in the legacy driver:\n\n\n?php\n\n$collection = (new MongoDB\\Client)-\ndemo-\nzips;\n\n$document = $collection-\nfindOne(\n    ['_id' =\n '94301'],\n    ['typeMap' =\n ['root' =\n 'array', 'document' =\n 'array']]\n);\n\nvar_dump($document);\n\n\n\n\nThe above example would output something similar to:\n\n\narray(5) {\n  [\n_id\n]=\n\n  string(5) \n94301\n\n  [\ncity\n]=\n\n  string(9) \nPALO ALTO\n\n  [\nloc\n]=\n\n  array(2) {\n    [0]=\n\n    float(-122.149685)\n    [1]=\n\n    float(37.444324)\n  }\n  [\npop\n]=\n\n  int(15965)\n  [\nstate\n]=\n\n  string(2) \nCA\n\n}\n\n\n\n\nFinding Many Documents\n\n\nThe \nfind()\n method returns a \nMongoDB\\Driver\\Cursor\n object,\nwhich may be iterated upon to access all matched documents.\n\n\n?php\n\n$collection = (new MongoDB\\Client)-\ndemo-\nzips;\n\n$cursor = $collection-\nfind(['city' =\n 'JERSEY CITY', 'state' =\n 'NJ']);\n\nforeach ($cursor as $document) {\n    echo $document['_id'], \n\\n\n;\n}\n\n\n\n\nThe above example would output something similar to:\n\n\n07302\n07304\n07305\n07306\n07307\n07310", 
            "title": "CRUD Operations"
        }, 
        {
            "location": "/tutorial/crud/#crud-operations", 
            "text": "CRUD is an acronym for Create, Read, Update, and Delete. These operations may be\nperformed via the  MongoDB\\Collection  class, which implements\nMongoDB s cross-driver  CRUD specification . This page will\ndemonstrate how to insert, query, update, and delete documents using the\nlibrary. A general introduction to CRUD operations in MongoDB may be found in\nthe  MongoDB Manual .", 
            "title": "CRUD Operations"
        }, 
        {
            "location": "/tutorial/crud/#querying", 
            "text": "Finding One Document  The  findOne()  method returns the first matched document, or null if\nno document was matched. By default, the library returns BSON documents and\narrays as MongoDB\\Model\\BSONDocument and MongoDB\\Model\\BSONArray objects,\nrespectively. Both of those classes extend PHP s  ArrayObject \nclass.  ?php\n\n$collection = (new MongoDB\\Client)- demo- zips;\n\n$document = $collection- findOne(['_id' =  '94301']);\n\nvar_dump($document);  The above example would output something similar to:  object(MongoDB\\Model\\BSONDocument)#13 (1) {\n  [ storage : ArrayObject :private]= \n  array(5) {\n    [ _id ]= \n    string(5)  94301 \n    [ city ]= \n    string(9)  PALO ALTO \n    [ loc ]= \n    object(MongoDB\\Model\\BSONArray)#12 (1) {\n      [ storage : ArrayObject :private]= \n      array(2) {\n        [0]= \n        float(-122.149685)\n        [1]= \n        float(37.444324)\n      }\n    }\n    [ pop ]= \n    int(15965)\n    [ state ]= \n    string(2)  CA \n  }\n}  Most methods that read data from MongoDB support a  typeMap  option, which\nallows control over how BSON is converted to PHP. If desired, this option can be\nused to return everything as a PHP array, as was done in the legacy driver:  ?php\n\n$collection = (new MongoDB\\Client)- demo- zips;\n\n$document = $collection- findOne(\n    ['_id' =  '94301'],\n    ['typeMap' =  ['root' =  'array', 'document' =  'array']]\n);\n\nvar_dump($document);  The above example would output something similar to:  array(5) {\n  [ _id ]= \n  string(5)  94301 \n  [ city ]= \n  string(9)  PALO ALTO \n  [ loc ]= \n  array(2) {\n    [0]= \n    float(-122.149685)\n    [1]= \n    float(37.444324)\n  }\n  [ pop ]= \n  int(15965)\n  [ state ]= \n  string(2)  CA \n}  Finding Many Documents  The  find()  method returns a  MongoDB\\Driver\\Cursor  object,\nwhich may be iterated upon to access all matched documents.  ?php\n\n$collection = (new MongoDB\\Client)- demo- zips;\n\n$cursor = $collection- find(['city' =  'JERSEY CITY', 'state' =  'NJ']);\n\nforeach ($cursor as $document) {\n    echo $document['_id'],  \\n ;\n}  The above example would output something similar to:  07302\n07304\n07305\n07306\n07307\n07310", 
            "title": "Querying"
        }, 
        {
            "location": "/tutorial/commands/", 
            "text": "Database Commands\n\n\nWhile the library provides helpers for some common database commands, it is far\nfrom an \nexhaustive list\n. This page will demonstrate how to\nexecute arbitrary commands on the MongoDB server via the\n\nDatabase::command()\n method and access their results.\n\n\nSingle Result Documents\n\n\nThe \ncommand()\n method always returns a\n\nMongoDB\\Driver\\Cursor\n. Unless otherwise stated in the MongoDB\ndocumentation, command responses are returned as a single document. Reading such\na result will require iterating on the cursor and accessing the first (and only)\ndocument, like so:\n\n\n?php\n\n$database = (new MongoDB\\Client)-\ndemo;\n\n$cursor = $database-\ncommand(['ping' =\n 1]);\n\nvar_dump($cursor-\ntoArray()[0]);\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\BSONDocument)#2 (1) {\n  [\nstorage\n:\nArrayObject\n:private]=\n\n  array(1) {\n    [\nok\n]=\n\n    float(1)\n  }\n}\n\n\n\n\nIterable Results as a Command Cursor\n\n\nSome commands, such as \naggregate\n with the \ncursor\n option, may\nreturn their results via an iterable command cursor. In this case, the returned\nMongoDB\\Driver\\Cursor\n may be iterated in the same manner as one might\ndo with a \nCollection::find()\n query, like so:\n\n\n?php\n\n$database = (new MongoDB\\Client)-\ndemo;\n\n$cursor = $database-\ncommand([\n    'aggregate' =\n 'zips',\n    'pipeline' =\n [\n        ['$group' =\n ['_id' =\n '$state', 'count' =\n ['$sum' =\n 1]]],\n        ['$sort' =\n ['count' =\n -1]],\n        ['$limit' =\n 5],\n    ],\n    'cursor' =\n new \\stdClass,\n]);\n\nforeach ($cursor as $state) {\n    printf(\n%s has %d zip codes\\n\n, $state['_id'], $state['count']);\n}\n\n\n\n\nThe above example would output something similar to:\n\n\nTX has 1671 zip codes\nNY has 1595 zip codes\nCA has 1516 zip codes\nPA has 1458 zip codes\nIL has 1237 zip codes\n\n\n\n\nSpecifying a Read Preference\n\n\nSome commands, such as \ncreateUser\n, can only be executed on a\nprimary server. Command helpers in the library, such as\n\nDatabase::drop()\n, know to apply their own read preference if necessary;\nhowever, \ncommand()\n is a generic method and has no special knowledge.\nIt defaults to the read preference of the Database object on which it is\ninvoked. In such cases, it can be helpful to explicitly specify the correct read\npreference, like so:\n\n\n?php\n\n$db = (new MongoDB\\Client)-\ndemo;\n\n$cursor = $db-\ncommand(\n    [\n        'createUser' =\n 'username',\n        'pwd' =\n 'password',\n        'roles' =\n ['readWrite'],\n    ],\n    [\n        'readPreference' =\n new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY),\n    ]\n);\n\nvar_dump($cursor-\ntoArray()[0]);\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\nstorage\n:\nArrayObject\n:private]=\n\n  array(1) {\n    [\nok\n]=\n\n    float(1)\n  }\n}", 
            "title": "Database Commands"
        }, 
        {
            "location": "/tutorial/commands/#database-commands", 
            "text": "While the library provides helpers for some common database commands, it is far\nfrom an  exhaustive list . This page will demonstrate how to\nexecute arbitrary commands on the MongoDB server via the Database::command()  method and access their results.", 
            "title": "Database Commands"
        }, 
        {
            "location": "/tutorial/commands/#single-result-documents", 
            "text": "The  command()  method always returns a MongoDB\\Driver\\Cursor . Unless otherwise stated in the MongoDB\ndocumentation, command responses are returned as a single document. Reading such\na result will require iterating on the cursor and accessing the first (and only)\ndocument, like so:  ?php\n\n$database = (new MongoDB\\Client)- demo;\n\n$cursor = $database- command(['ping' =  1]);\n\nvar_dump($cursor- toArray()[0]);  The above example would output something similar to:  object(MongoDB\\Model\\BSONDocument)#2 (1) {\n  [ storage : ArrayObject :private]= \n  array(1) {\n    [ ok ]= \n    float(1)\n  }\n}", 
            "title": "Single Result Documents"
        }, 
        {
            "location": "/tutorial/commands/#iterable-results-as-a-command-cursor", 
            "text": "Some commands, such as  aggregate  with the  cursor  option, may\nreturn their results via an iterable command cursor. In this case, the returned MongoDB\\Driver\\Cursor  may be iterated in the same manner as one might\ndo with a  Collection::find()  query, like so:  ?php\n\n$database = (new MongoDB\\Client)- demo;\n\n$cursor = $database- command([\n    'aggregate' =  'zips',\n    'pipeline' =  [\n        ['$group' =  ['_id' =  '$state', 'count' =  ['$sum' =  1]]],\n        ['$sort' =  ['count' =  -1]],\n        ['$limit' =  5],\n    ],\n    'cursor' =  new \\stdClass,\n]);\n\nforeach ($cursor as $state) {\n    printf( %s has %d zip codes\\n , $state['_id'], $state['count']);\n}  The above example would output something similar to:  TX has 1671 zip codes\nNY has 1595 zip codes\nCA has 1516 zip codes\nPA has 1458 zip codes\nIL has 1237 zip codes", 
            "title": "Iterable Results as a Command Cursor"
        }, 
        {
            "location": "/tutorial/commands/#specifying-a-read-preference", 
            "text": "Some commands, such as  createUser , can only be executed on a\nprimary server. Command helpers in the library, such as Database::drop() , know to apply their own read preference if necessary;\nhowever,  command()  is a generic method and has no special knowledge.\nIt defaults to the read preference of the Database object on which it is\ninvoked. In such cases, it can be helpful to explicitly specify the correct read\npreference, like so:  ?php\n\n$db = (new MongoDB\\Client)- demo;\n\n$cursor = $db- command(\n    [\n        'createUser' =  'username',\n        'pwd' =  'password',\n        'roles' =  ['readWrite'],\n    ],\n    [\n        'readPreference' =  new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_PRIMARY),\n    ]\n);\n\nvar_dump($cursor- toArray()[0]);  The above example would output something similar to:  object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [ storage : ArrayObject :private]= \n  array(1) {\n    [ ok ]= \n    float(1)\n  }\n}", 
            "title": "Specifying a Read Preference"
        }, 
        {
            "location": "/tutorial/indexes/", 
            "text": "Indexes\n\n\nIndexes may be managed via the \nMongoDB\\Collection\n class, which\nimplements MongoDB\ns cross-driver \nIndex Management\n and\n\nEnumerating Indexes\n specifications. This page will demonstrate how\nto create, list, and drop indexes using the library. General information on how\nindexes work in MongoDB may be found in the \nMongoDB manual\n.\n\n\nCreating Indexes\n\n\nIndexes may be created via the \ncreateIndex()\n and\n\ncreateIndexes()\n methods. The following example creates an\nascending index on the \nstate\n field:\n\n\n?php\n\n$collection = (new MongoDB\\Client)-\ndemo-\nzips;\n\n$result = $collection-\ncreateIndex(['state' =\n 1]);\n\nvar_dump($result);\n\n\n\n\nCreating an index will return its name, which is automatically generated from\nits specification (i.e. fields and orderings). The above example would output\nsomething similar to:\n\n\nstring(7) \nstate_1\n\n\n\n\n\nEnumerating Indexes\n\n\nInformation about indexes in a collection may be obtained via the\n\nlistIndexes()\n method, which returns an iterator of\nMongoDB\\Model\\IndexInfo objects. The following example lists all indexes in the\n\ndemo.zips\n collection:\n\n\n?php\n\n$collection = (new MongoDB\\Client)-\ndemo-\nzips;\n\nforeach ($collection-\nlistIndexes() as $indexInfo) {\n    var_dump($indexInfo);\n}\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\IndexInfo)#10 (4) {\n  [\nv\n]=\n\n  int(1)\n  [\nkey\n]=\n\n  array(1) {\n    [\n_id\n]=\n\n    int(1)\n  }\n  [\nname\n]=\n\n  string(4) \n_id_\n\n  [\nns\n]=\n\n  string(9) \ndemo.zips\n\n}\nobject(MongoDB\\Model\\IndexInfo)#13 (4) {\n  [\nv\n]=\n\n  int(1)\n  [\nkey\n]=\n\n  array(1) {\n    [\nstate\n]=\n\n    int(1)\n  }\n  [\nname\n]=\n\n  string(7) \nstate_1\n\n  [\nns\n]=\n\n  string(9) \ndemo.zips\n\n}\n\n\n\n\nDropping Indexes\n\n\nIndexes may be dropped via the \ndropIndex()\n and\n\ndropIndexes()\n methods. The following example drops a single index\nby its name:\n\n\n?php\n\n$collection = (new MongoDB\\Client)-\ndemo-\nzips;\n\n$result = $collection-\ndropIndex('state_1');\n\nvar_dump($result);\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\nstorage\n:\nArrayObject\n:private]=\n\n  array(2) {\n    [\nnIndexesWas\n]=\n\n    int(2)\n    [\nok\n]=\n\n    float(1)\n  }\n}", 
            "title": "Indexes"
        }, 
        {
            "location": "/tutorial/indexes/#indexes", 
            "text": "Indexes may be managed via the  MongoDB\\Collection  class, which\nimplements MongoDB s cross-driver  Index Management  and Enumerating Indexes  specifications. This page will demonstrate how\nto create, list, and drop indexes using the library. General information on how\nindexes work in MongoDB may be found in the  MongoDB manual .", 
            "title": "Indexes"
        }, 
        {
            "location": "/tutorial/indexes/#creating-indexes", 
            "text": "Indexes may be created via the  createIndex()  and createIndexes()  methods. The following example creates an\nascending index on the  state  field:  ?php\n\n$collection = (new MongoDB\\Client)- demo- zips;\n\n$result = $collection- createIndex(['state' =  1]);\n\nvar_dump($result);  Creating an index will return its name, which is automatically generated from\nits specification (i.e. fields and orderings). The above example would output\nsomething similar to:  string(7)  state_1   Enumerating Indexes  Information about indexes in a collection may be obtained via the listIndexes()  method, which returns an iterator of\nMongoDB\\Model\\IndexInfo objects. The following example lists all indexes in the demo.zips  collection:  ?php\n\n$collection = (new MongoDB\\Client)- demo- zips;\n\nforeach ($collection- listIndexes() as $indexInfo) {\n    var_dump($indexInfo);\n}  The above example would output something similar to:  object(MongoDB\\Model\\IndexInfo)#10 (4) {\n  [ v ]= \n  int(1)\n  [ key ]= \n  array(1) {\n    [ _id ]= \n    int(1)\n  }\n  [ name ]= \n  string(4)  _id_ \n  [ ns ]= \n  string(9)  demo.zips \n}\nobject(MongoDB\\Model\\IndexInfo)#13 (4) {\n  [ v ]= \n  int(1)\n  [ key ]= \n  array(1) {\n    [ state ]= \n    int(1)\n  }\n  [ name ]= \n  string(7)  state_1 \n  [ ns ]= \n  string(9)  demo.zips \n}  Dropping Indexes  Indexes may be dropped via the  dropIndex()  and dropIndexes()  methods. The following example drops a single index\nby its name:  ?php\n\n$collection = (new MongoDB\\Client)- demo- zips;\n\n$result = $collection- dropIndex('state_1');\n\nvar_dump($result);  The above example would output something similar to:  object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [ storage : ArrayObject :private]= \n  array(2) {\n    [ nIndexesWas ]= \n    int(2)\n    [ ok ]= \n    float(1)\n  }\n}", 
            "title": "Creating Indexes"
        }, 
        {
            "location": "/tutorial/example-data/", 
            "text": "Example Data\n\n\nSome examples in this documentation use example data fixtures from\n\nzips.json\n. This is a dataset comprised of United States postal codes,\npopulations, and geographic locations.\n\n\nImporting the dataset into MongoDB can be done in several ways. The following\nexample uses \nmongodb extension\n:\n\n\n?php\n\n$file = 'http://media.mongodb.org/zips.json';\n$zips = file($file, FILE_IGNORE_NEW_LINES);\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n\nforeach ($zips as $string) {\n    $document = json_decode($string);\n    $bulk-\ninsert($document);\n}\n\n$manager = new MongoDB\\Driver\\Manager('mongodb://localhost');\n\n$result = $manager-\nexecuteBulkWrite('demo.zips', $bulk);\nprintf(\nInserted %d documents\\n\n, $result-\ngetInsertedCount());\n\n\n\n\nExecuting this script should yield the following output:\n\n\nInserted 29353 documents\n\n\n\n\nYou may also import the dataset using the \nmongoimport\n command,\nwhich is included with MongoDB:\n\n\n$ mongoimport --db demo --collection zips --file zips.json --drop", 
            "title": "Example Data"
        }, 
        {
            "location": "/tutorial/example-data/#example-data", 
            "text": "Some examples in this documentation use example data fixtures from zips.json . This is a dataset comprised of United States postal codes,\npopulations, and geographic locations.  Importing the dataset into MongoDB can be done in several ways. The following\nexample uses  mongodb extension :  ?php\n\n$file = 'http://media.mongodb.org/zips.json';\n$zips = file($file, FILE_IGNORE_NEW_LINES);\n\n$bulk = new MongoDB\\Driver\\BulkWrite;\n\nforeach ($zips as $string) {\n    $document = json_decode($string);\n    $bulk- insert($document);\n}\n\n$manager = new MongoDB\\Driver\\Manager('mongodb://localhost');\n\n$result = $manager- executeBulkWrite('demo.zips', $bulk);\nprintf( Inserted %d documents\\n , $result- getInsertedCount());  Executing this script should yield the following output:  Inserted 29353 documents  You may also import the dataset using the  mongoimport  command,\nwhich is included with MongoDB:  $ mongoimport --db demo --collection zips --file zips.json --drop", 
            "title": "Example Data"
        }, 
        {
            "location": "/classes/client/", 
            "text": "MongoDB\\Client\n\n\nThe MongoDB\\Client class serves as an entry point for the library. It is the\npreferred class for connecting to a MongoDB server or cluster of servers and\nserves as a gateway for accessing individual databases and collections. It is\nanalogous to the driver\ns \nMongoDB\\Driver\\Manager\n class, which it\ncomposes.\n\n\n\n\n__construct()\n\n\nfunction __construct($uri = 'mongodb://localhost:27017', array $uriOptions = [], array $driverOptions = [])\n\n\n\n\nConstructs a new Client instance.\n\n\nAdditional URI options may be provided as the second argument and will take\nprecedence over any like options present in the URI string (e.g. authentication\ncredentials, query string parameters).\n\n\nDriver options may be provided as the third argument. In addition to any options\nsupported by the extension, this library allows you to specify a default\ntype map to apply to the cursors it creates. A more thorough description of type\nmaps may be found in the driver\ns \nPersistence documentation\n.\n\n\nSupported URI Options\n\n\nSee \nMongoDB\\Driver\\Manager::__construct()\n and the\n\nMongoDB manual\n.\n\n\nSupported Driver Options\n\n\n\n\ntypeMap (array)\n\n\nDefault type map for cursors and BSON documents.\n\n\n\n\nExample\n\n\nBy default, the driver connects to a standalone server on\n\nmongodb://localhost:27017\n. The following demonstrates how one might connect to\na replica set with a custom read preference:\n\n\n?php\n\n$client = new MongoDB\\Client(\n    'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet',\n    [\n        'readPreference' =\n 'secondaryPreferred'\n    ]\n);\n\n\n\n\nBy default, the library will unserialize BSON documents and arrays as\nMongoDB\\Model\\BSONDocument and MongoDB\\Model\\BSONArray objects,  respectively.\nEach of these model classes extends PHP\ns \nArrayObject\n class and implements the driver\ns\nMongoDB\\BSON\\Serializable\n and\n\nMongoDB\\BSON\\Unserializable\n\ninterfaces.\n\n\nThe following examples instructs the library to unserialize root and embedded\nBSON documents as PHP arrays, like the legacy driver (i.e. ext-mongo):\n\n\n?php\n\n$client = new MongoDB\\Client(\n    null,\n    [],\n    [\n        'typeMap' =\n ['root' =\n 'array', 'document' =\n 'array'],\n    ]\n);\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Driver\\Manager::__construct()\n\n\nMongoDB Manual: Connection String\n\n\n\n\n\n\n__get()\n\n\nfunction __get($databaseName): MongoDB\\Database\n\n\n\n\nSelect a database.\n\n\nThe Database will inherit options (e.g. read preference, type map) from the\nClient object. Use \nselectDatabase()\n to override any options.\n\n\nNote:\n databases whose names contain special characters (e.g. \n-\n) may be\nselected with complex syntax (e.g. \n$client-\n{\"that-database\"}\n) or\n\nselectDatabase()\n.\n\n\nExample\n\n\nThe following example selects the \ndemo\n and \nanother-app\n databases:\n\n\n?php\n\n$client = new MongoDB\\Client;\n\n$demo = $client-\ndemo;\n$anotherApp = $client-\n{'another-app'};\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Client::selectDatabase()\n\n\nPHP Manual: Property Overloading\n\n\n\n\n\n\ndropDatabase\n\n\nfunction dropDatabase($databaseName, array $options = []): array|object\n\n\n\n\nDrop a database. Returns the command result document.\n\n\nSupported Options\n\n\n\n\ntypeMap (array)\n\n\nType map for BSON deserialization. This will only be used for the returned\ncommand result document.\n\n\n\n\nExample\n\n\nThe following example drops the \ndemo\n database:\n\n\n?php\n\n$client = new MongoDB\\Client;\n\n$result = $client-\ndropDatabase('demo');\n\nvar_dump($result);\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [\nstorage\n:\nArrayObject\n:private]=\n\n  array(2) {\n    [\ndropped\n]=\n\n    string(4) \ndemo\n\n    [\nok\n]=\n\n    float(1)\n  }\n}\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Database::drop()\n\n\nMongoDB Manual: dropDatabase command\n\n\n\n\n\n\nlistDatabases()\n\n\nfunction listDatabases(array $options = []): MongoDB\\Model\\DatabaseInfoIterator\n\n\n\n\nReturns information for all database on the server. Elements in the returned\niterator will be MongoDB\\Model\\DatabaseInfo objects.\n\n\nSupported Options\n\n\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run.\n\n\n\n\nExample\n\n\nThe following example lists all databases on the server:\n\n\n?php\n\n$client = new MongoDB\\Client;\n\nforeach ($client-\nlistDatabases() as $databaseInfo) {\n    var_dump($databaseInfo);\n}\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\DatabaseInfo)#4 (3) {\n  [\nname\n]=\n\n  string(5) \nlocal\n\n  [\nsizeOnDisk\n]=\n\n  float(65536)\n  [\nempty\n]=\n\n  bool(false)\n}\nobject(MongoDB\\Model\\DatabaseInfo)#7 (3) {\n  [\nname\n]=\n\n  string(4) \ntest\n\n  [\nsizeOnDisk\n]=\n\n  float(32768)\n  [\nempty\n]=\n\n  bool(false)\n}\n\n\n\n\nSee Also\n\n\n\n\nMongoDB Manual: listDatabases command\n\n\n\n\n\n\nselectCollection()\n\n\nfunction selectCollection($databaseName, $collectionName, array $options = []): MongoDB\\Collection\n\n\n\n\nSelect a collection on the server.\n\n\nThe Collection will inherit options (e.g. read preference, type map) from the\nClient object unless otherwise specified.\n\n\nSupported Options\n\n\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nThe default read concern to use for collection operations. Defaults to the\nClient\ns read concern.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nThe default read preference to use for collection operations. Defaults to\nthe Client\ns read preference.\n\n\ntypeMap (array)\n\n\nDefault type map for cursors and BSON documents. Defaults to the Client\ns\ntype map.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nThe default write concern to use for collection operations. Defaults to the\nClient\ns write concern.\n\n\n\n\nExample\n\n\nThe following example selects the \ndemo.users\n collection:\n\n\n?php\n\n$client = new MongoDB\\Client;\n\n$collection = $client-\nselectCollection('demo', 'users');\n\n\n\n\nThe following examples selects the \ndemo.users\n collection with a custom read\npreference:\n\n\n?php\n\n$client = new MongoDB\\Client;\n\n$collection = $client-\nselectCollection(\n    'demo',\n    'users',\n    [\n        'readPreference' =\n new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY),\n    ]\n);\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::__construct()\n\n\nMongoDB\\Client::__get()\n\n\n\n\n\n\nselectDatabase()\n\n\nfunction selectDatabase($databaseName array $options = []): MongoDB\\Collection\n\n\n\n\nSelect a database on the server.\n\n\nThe Database will inherit options (e.g. read preference, type map) from the\nClient object unless otherwise specified.\n\n\nSupported Options\n\n\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nThe default read concern to use for database operations. Defaults to the\nClient\ns read concern.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nThe default read preference to use for database operations. Defaults to the\nClient\ns read preference.\n\n\ntypeMap (array)\n\n\nDefault type map for cursors and BSON documents. Defaults to the Client\ns\ntype map.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nThe default write concern to use for database operations. Defaults to the\nClient\ns write concern.\n\n\n\n\nExample\n\n\nThe following example selects the \ndemo\n database:\n\n\n?php\n\n$client = new MongoDB\\Client;\n\n$db = $client-\nselectDatabase('demo');\n\n\n\n\nThe following examples selects the \ndemo\n database with a custom read\npreference:\n\n\n?php\n\n$client = new MongoDB\\Client;\n\n$db = $client-\nselectDatabase(\n    'demo',\n    [\n        'readPreference' =\n new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY),\n    ]\n);\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Database::__construct()\n\n\nMongoDB\\Client::__get()", 
            "title": "Client"
        }, 
        {
            "location": "/classes/client/#mongodbclient", 
            "text": "The MongoDB\\Client class serves as an entry point for the library. It is the\npreferred class for connecting to a MongoDB server or cluster of servers and\nserves as a gateway for accessing individual databases and collections. It is\nanalogous to the driver s  MongoDB\\Driver\\Manager  class, which it\ncomposes.", 
            "title": "MongoDB\\Client"
        }, 
        {
            "location": "/classes/client/#__construct", 
            "text": "function __construct($uri = 'mongodb://localhost:27017', array $uriOptions = [], array $driverOptions = [])  Constructs a new Client instance.  Additional URI options may be provided as the second argument and will take\nprecedence over any like options present in the URI string (e.g. authentication\ncredentials, query string parameters).  Driver options may be provided as the third argument. In addition to any options\nsupported by the extension, this library allows you to specify a default\ntype map to apply to the cursors it creates. A more thorough description of type\nmaps may be found in the driver s  Persistence documentation .  Supported URI Options  See  MongoDB\\Driver\\Manager::__construct()  and the MongoDB manual .  Supported Driver Options   typeMap (array)  Default type map for cursors and BSON documents.   Example  By default, the driver connects to a standalone server on mongodb://localhost:27017 . The following demonstrates how one might connect to\na replica set with a custom read preference:  ?php\n\n$client = new MongoDB\\Client(\n    'mongodb://rs1.example.com,rs2.example.com/?replicaSet=myReplicaSet',\n    [\n        'readPreference' =  'secondaryPreferred'\n    ]\n);  By default, the library will unserialize BSON documents and arrays as\nMongoDB\\Model\\BSONDocument and MongoDB\\Model\\BSONArray objects,  respectively.\nEach of these model classes extends PHP s  ArrayObject  class and implements the driver s MongoDB\\BSON\\Serializable  and MongoDB\\BSON\\Unserializable \ninterfaces.  The following examples instructs the library to unserialize root and embedded\nBSON documents as PHP arrays, like the legacy driver (i.e. ext-mongo):  ?php\n\n$client = new MongoDB\\Client(\n    null,\n    [],\n    [\n        'typeMap' =  ['root' =  'array', 'document' =  'array'],\n    ]\n);  See Also   MongoDB\\Driver\\Manager::__construct()  MongoDB Manual: Connection String", 
            "title": "__construct()"
        }, 
        {
            "location": "/classes/client/#__get", 
            "text": "function __get($databaseName): MongoDB\\Database  Select a database.  The Database will inherit options (e.g. read preference, type map) from the\nClient object. Use  selectDatabase()  to override any options.  Note:  databases whose names contain special characters (e.g.  - ) may be\nselected with complex syntax (e.g.  $client- {\"that-database\"} ) or selectDatabase() .  Example  The following example selects the  demo  and  another-app  databases:  ?php\n\n$client = new MongoDB\\Client;\n\n$demo = $client- demo;\n$anotherApp = $client- {'another-app'};  See Also   MongoDB\\Client::selectDatabase()  PHP Manual: Property Overloading", 
            "title": "__get()"
        }, 
        {
            "location": "/classes/client/#dropdatabase", 
            "text": "function dropDatabase($databaseName, array $options = []): array|object  Drop a database. Returns the command result document.  Supported Options   typeMap (array)  Type map for BSON deserialization. This will only be used for the returned\ncommand result document.   Example  The following example drops the  demo  database:  ?php\n\n$client = new MongoDB\\Client;\n\n$result = $client- dropDatabase('demo');\n\nvar_dump($result);  The above example would output something similar to:  object(MongoDB\\Model\\BSONDocument)#8 (1) {\n  [ storage : ArrayObject :private]= \n  array(2) {\n    [ dropped ]= \n    string(4)  demo \n    [ ok ]= \n    float(1)\n  }\n}  See Also   MongoDB\\Database::drop()  MongoDB Manual: dropDatabase command", 
            "title": "dropDatabase"
        }, 
        {
            "location": "/classes/client/#listdatabases", 
            "text": "function listDatabases(array $options = []): MongoDB\\Model\\DatabaseInfoIterator  Returns information for all database on the server. Elements in the returned\niterator will be MongoDB\\Model\\DatabaseInfo objects.  Supported Options   maxTimeMS (integer)  The maximum amount of time to allow the query to run.   Example  The following example lists all databases on the server:  ?php\n\n$client = new MongoDB\\Client;\n\nforeach ($client- listDatabases() as $databaseInfo) {\n    var_dump($databaseInfo);\n}  The above example would output something similar to:  object(MongoDB\\Model\\DatabaseInfo)#4 (3) {\n  [ name ]= \n  string(5)  local \n  [ sizeOnDisk ]= \n  float(65536)\n  [ empty ]= \n  bool(false)\n}\nobject(MongoDB\\Model\\DatabaseInfo)#7 (3) {\n  [ name ]= \n  string(4)  test \n  [ sizeOnDisk ]= \n  float(32768)\n  [ empty ]= \n  bool(false)\n}  See Also   MongoDB Manual: listDatabases command", 
            "title": "listDatabases()"
        }, 
        {
            "location": "/classes/client/#selectcollection", 
            "text": "function selectCollection($databaseName, $collectionName, array $options = []): MongoDB\\Collection  Select a collection on the server.  The Collection will inherit options (e.g. read preference, type map) from the\nClient object unless otherwise specified.  Supported Options   readConcern (MongoDB\\Driver\\ReadConcern)  The default read concern to use for collection operations. Defaults to the\nClient s read concern.  readPreference (MongoDB\\Driver\\ReadPreference)  The default read preference to use for collection operations. Defaults to\nthe Client s read preference.  typeMap (array)  Default type map for cursors and BSON documents. Defaults to the Client s\ntype map.  writeConcern (MongoDB\\Driver\\WriteConcern)  The default write concern to use for collection operations. Defaults to the\nClient s write concern.   Example  The following example selects the  demo.users  collection:  ?php\n\n$client = new MongoDB\\Client;\n\n$collection = $client- selectCollection('demo', 'users');  The following examples selects the  demo.users  collection with a custom read\npreference:  ?php\n\n$client = new MongoDB\\Client;\n\n$collection = $client- selectCollection(\n    'demo',\n    'users',\n    [\n        'readPreference' =  new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY),\n    ]\n);  See Also   MongoDB\\Collection::__construct()  MongoDB\\Client::__get()", 
            "title": "selectCollection()"
        }, 
        {
            "location": "/classes/client/#selectdatabase", 
            "text": "function selectDatabase($databaseName array $options = []): MongoDB\\Collection  Select a database on the server.  The Database will inherit options (e.g. read preference, type map) from the\nClient object unless otherwise specified.  Supported Options   readConcern (MongoDB\\Driver\\ReadConcern)  The default read concern to use for database operations. Defaults to the\nClient s read concern.  readPreference (MongoDB\\Driver\\ReadPreference)  The default read preference to use for database operations. Defaults to the\nClient s read preference.  typeMap (array)  Default type map for cursors and BSON documents. Defaults to the Client s\ntype map.  writeConcern (MongoDB\\Driver\\WriteConcern)  The default write concern to use for database operations. Defaults to the\nClient s write concern.   Example  The following example selects the  demo  database:  ?php\n\n$client = new MongoDB\\Client;\n\n$db = $client- selectDatabase('demo');  The following examples selects the  demo  database with a custom read\npreference:  ?php\n\n$client = new MongoDB\\Client;\n\n$db = $client- selectDatabase(\n    'demo',\n    [\n        'readPreference' =  new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY),\n    ]\n);  See Also   MongoDB\\Database::__construct()  MongoDB\\Client::__get()", 
            "title": "selectDatabase()"
        }, 
        {
            "location": "/classes/database/", 
            "text": "MongoDB\\Database\n\n\nThe MongoDB\\Database class provides methods for common operations on a database,\nsuch as executing commands and managing collections.\n\n\nA Database may be constructed directly (using the extension\ns Manager class) or\nselected from the library\ns \nClient\n class. It supports the following\noptions:\n\n\n\n\nreadConcern\n\n\nreadPreference\n\n\ntypeMap\n\n\nwriteConcern\n\n\n\n\nIf any options are omitted, they will be inherited from the Manager constructor\nargument or object from which the Database was selected.\n\n\nOperations within the Database class (e.g. \ncommand()\n) will generally\ninherit the Database\ns options.\n\n\n\n\n__construct()\n\n\nfunction __construct(MongoDB\\Driver\\Manager $manager, $databaseName, array $options = [])\n\n\n\n\nIf the Database is constructed explicitly, any omitted options will be inherited\nfrom the Manager object. If the Database is selected from a \nClient\n\nobject, options will be inherited from that object.\n\n\nSupported Options\n\n\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nThe default read concern to use for database operations and selected\ncollections. Defaults to the Manager\ns read concern.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nThe default read preference to use for database operations and selected\ncollections. Defaults to the Manager\ns read preference.\n\n\ntypeMap (array)\n\n\nDefault type map for cursors and BSON documents.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nThe default write concern to use for database operations and selected\ncollections. Defaults to the Manager\ns write concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Database::withOptions()\n\n\n\n\n\n\n__get()\n\n\nfunction __get($collectionName): MongoDB\\Collection\n\n\n\n\nSelect a collection within this database.\n\n\nThe Collection will inherit options (e.g. read preference, type map) from the\nDatabase object. Use \nselectCollection()\n to override any\noptions.\n\n\nNote:\n collections whose names contain special characters (e.g. \n.\n) may be\nselected with complex syntax (e.g. \n$database-\n{\"system.profile\"}\n) or\n\nselectCollection()\n.\n\n\nExample\n\n\nThe following example selects the \ndemo.users\n and \ndemo.system.profile\n\ncollections:\n\n\n?php\n\n$db = (new MongoDB\\Client)-\ndemo;\n\n$users = $db-\nusers;\n$systemProfile = $db-\n{'system.profile'};\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Database::selectCollection()\n\n\nPHP Manual: Property Overloading\n\n\n\n\n\n\ncommand()\n\n\nfunction function command($command, array $options = []): MongoDB\\Driver\\Cursor\n\n\n\n\nExecute a command on this database.\n\n\nSupported Options\n\n\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nThe read preference to use when executing the command. This may be used when\nissuing the command to a replica set or mongos node to ensure that the\ndriver sets the wire protocol accordingly or adds the read preference to the\ncommand document, respectively.\n\n\ntypeMap (array)\n\n\nType map for BSON deserialization. This will be applied to the returned\nCursor (it is not sent to the server).\n\n\n\n\nSee Also\n\n\n\n\nTutorial: Database Commands\n\n\nMongoDB Manual: Database Commands\n\n\n\n\ncreateCollection\n\n\nfunction createCollection($collectionName, array $options = []): array|object\n\n\n\n\nCreate a new collection explicitly. Returns the command result document.\n\n\nMongoDB already creates collections implicitly when they are first referenced in\ncommands (e.g. inserting a document into a new collection); however, collections\nmay also be explicitly created with specific options. This is useful for\ncreating \ncapped collections\n, enabling\n\ndocument validation\n, or supplying storage engine options.\n\n\nSupported Options\n\n\n\n\nautoIndexId (boolean)\n\n\nSpecify false to disable the automatic creation of an index on the _id\nfield. For replica sets, this option cannot be false. The default is true.\n\n\ncapped (boolean)\n\n\nSpecify true to create a capped collection. If set, the size option must\nalso be specified. The default is false.\n\n\nflags (integer)\n\n\nOptions for the MMAPv1 storage engine only. Must be a bitwise combination\n\nMongoDB\\Operation\\CreateCollection::USE_POWER_OF_2_SIZES\n and\n\nMongoDB\\Operation\\CreateCollection::NO_PADDING\n. The default is\n\nMongoDB\\Operation\\CreateCollection::USE_POWER_OF_2_SIZES\n.\n\n\nindexOptionDefaults (document)\n\n\nDefault configuration for indexes when creating the collection.\n\n\nmax (integer)\n\n\nThe maximum number of documents allowed in the capped collection. The size\noption takes precedence over this limit.\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run.\n\n\nsize (integer)\n\n\nThe maximum number of bytes for a capped collection.\n\n\nstorageEngine (document)\n\n\nStorage engine options.\n\n\ntypeMap (array)\n\n\nType map for BSON deserialization. This will only be used for the returned\ncommand result document.\n\n\nvalidationAction (string)\n\n\nValidation action.\n\n\nvalidationLevel (string)\n\n\nValidation level.\n\n\nvalidator (document)\n\n\nValidation rules or expressions.\n\n\n\n\nExample\n\n\nThe following example creates the \ndemo.users\n collection with a custom\ndocument validator\n (available in MongoDB 3.2+):\n\n\n?php\n\n$db = (new MongoDB\\Client)-\ndemo;\n\n$result = $db-\ncreateCollection('users', [\n    'validator' =\n [\n        'username' =\n ['$type' =\n 'string'],\n        'email' =\n ['$regex' =\n '@mongodb\\.com$'],\n    ],\n]);\n\nvar_dump($result);\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\nstorage\n:\nArrayObject\n:private]=\n\n  array(1) {\n    [\nok\n]=\n\n    float(1)\n  }\n}\n\n\n\n\nSee Also\n\n\n\n\nMongoDB Manual: create command\n\n\n\n\n\n\ndrop\n\n\nfunction drop(array $options = []): array|object\n\n\n\n\nDrop this database. Returns the command result document.\n\n\nSupported Options\n\n\n\n\ntypeMap (array)\n\n\nType map for BSON deserialization. This will only be used for the returned\ncommand result document.\n\n\n\n\nExample\n\n\nThe following example drops the \ndemo\n database:\n\n\n$db = (new MongoDB\\Client)-\ndemo;\n\n$result = $db-\ndrop();\n\nvar_dump($result);\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\nstorage\n:\nArrayObject\n:private]=\n\n  array(2) {\n    [\ndropped\n]=\n\n    string(4) \ndemo\n\n    [\nok\n]=\n\n    float(1)\n  }\n}\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Client::dropDatabase()\n\n\nMongoDB Manual: dropDatabase command\n\n\n\n\n\n\ndropCollection\n\n\nfunction dropCollection($collectionName, array $options = []): array|object\n\n\n\n\nDrop a collection within this database. Returns the command result document.\n\n\nSupported Options\n\n\n\n\ntypeMap (array)\n\n\nType map for BSON deserialization. This will only be used for the returned\ncommand result document.\n\n\n\n\nExample\n\n\nThe following example drops the \ndemo.users\n collection:\n\n\n?php\n\n$db = (new MongoDB\\Client)-\ndemo;\n\n$result = $db-\ndropCollection('users');\n\nvar_dump($result);\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\nstorage\n:\nArrayObject\n:private]=\n\n  array(3) {\n    [\nns\n]=\n\n    string(10) \ndemo.users\n\n    [\nnIndexesWas\n]=\n\n    int(1)\n    [\nok\n]=\n\n    float(1)\n  }\n}\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::drop()\n\n\nMongoDB Manual: drop command\n\n\n\n\n\n\ngetDatabaseName()\n\n\nfunction getDatabaseName(): string\n\n\n\n\nReturn the database name.\n\n\n\n\nlistCollections()\n\n\nfunction listCollections(array $options = []): MongoDB\\Model\\CollectionInfoIterator\n\n\n\n\nReturns information for all collections in this database. Elements in the\nreturned iterator will be MongoDB\\Model\\CollectionInfo objects.\n\n\nSupported Options\n\n\n\n\nfilter (document)\n\n\nQuery by which to filter collections.\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run.\n\n\n\n\nExample\n\n\nThe following example lists all collections in the \ndemo\n database:\n\n\n?php\n\n$db = (new MongoDB\\Client)-\ndemo;\n\nforeach ($db-\nlistCollections() as $collectionInfo) {\n    var_dump($collectionInfo);\n}\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\CollectionInfo)#8 (2) {\n  [\nname\n]=\n\n  string(5) \nusers\n\n  [\noptions\n]=\n\n  array(0) {\n  }\n}\nobject(MongoDB\\Model\\CollectionInfo)#13 (2) {\n  [\nname\n]=\n\n  string(14) \nsystem.profile\n\n  [\noptions\n]=\n\n  array(2) {\n    [\ncapped\n]=\n\n    bool(true)\n    [\nsize\n]=\n\n    int(1048576)\n  }\n}\n\n\n\n\nSee Also\n\n\n\n\nMongoDB Manual: listCollections command\n\n\nMongoDB Specification: Enumerating Collections\n\n\n\n\n\n\nselectCollection()\n\n\nfunction selectCollection($collectionName, array $options = []): MongoDB\\Collection\n\n\n\n\nSelect a collection within this database.\n\n\nThe Collection will inherit options (e.g. read preference, type map) from the\nDatabase object unless otherwise specified.\n\n\nSupported Options\n\n\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nThe default read concern to use for collection operations. Defaults to the\nDatabase\ns read concern.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nThe default read preference to use for collection operations. Defaults to\nthe Database\ns read preference.\n\n\ntypeMap (array)\n\n\nDefault type map for cursors and BSON documents. Defaults to the Database\ns\ntype map.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nThe default write concern to use for collection operations. Defaults to the\nDatabase\ns write concern.\n\n\n\n\nExample\n\n\nThe following example selects the \ndemo.users\n collection:\n\n\n?php\n\n$db = (new MongoDB\\Client)-\ndemo;\n\n$collection = $db-\nselectCollection('users');\n\n\n\n\nThe following examples selects the \ndemo.users\n collection with a custom read\npreference:\n\n\n?php\n\n$db = (new MongoDB\\Client)-\ndemo;\n\n$collection = $db-\nselectCollection(\n    'users',\n    [\n        'readPreference' =\n new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY),\n    ]\n);\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::__construct()\n\n\nMongoDB\\Database::__get()\n\n\n\n\n\n\nwithOptions()\n\n\nfunction withOptions(array $options = []): MongoDB\\Database\n\n\n\n\nReturns a clone of this database with different options.\n\n\nSupported Options\n\n\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nThe default read concern to use for database operations and selected\ncollections. Defaults to the Manager\ns read concern.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nThe default read preference to use for database operations and selected\ncollections. Defaults to the Manager\ns read preference.\n\n\ntypeMap (array)\n\n\nDefault type map for cursors and BSON documents.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nThe default write concern to use for database operations and selected\ncollections. Defaults to the Manager\ns write concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Database::__construct()", 
            "title": "Database"
        }, 
        {
            "location": "/classes/database/#mongodbdatabase", 
            "text": "The MongoDB\\Database class provides methods for common operations on a database,\nsuch as executing commands and managing collections.  A Database may be constructed directly (using the extension s Manager class) or\nselected from the library s  Client  class. It supports the following\noptions:   readConcern  readPreference  typeMap  writeConcern   If any options are omitted, they will be inherited from the Manager constructor\nargument or object from which the Database was selected.  Operations within the Database class (e.g.  command() ) will generally\ninherit the Database s options.", 
            "title": "MongoDB\\Database"
        }, 
        {
            "location": "/classes/database/#__construct", 
            "text": "function __construct(MongoDB\\Driver\\Manager $manager, $databaseName, array $options = [])  If the Database is constructed explicitly, any omitted options will be inherited\nfrom the Manager object. If the Database is selected from a  Client \nobject, options will be inherited from that object.  Supported Options   readConcern (MongoDB\\Driver\\ReadConcern)  The default read concern to use for database operations and selected\ncollections. Defaults to the Manager s read concern.  readPreference (MongoDB\\Driver\\ReadPreference)  The default read preference to use for database operations and selected\ncollections. Defaults to the Manager s read preference.  typeMap (array)  Default type map for cursors and BSON documents.  writeConcern (MongoDB\\Driver\\WriteConcern)  The default write concern to use for database operations and selected\ncollections. Defaults to the Manager s write concern.   See Also   MongoDB\\Database::withOptions()", 
            "title": "__construct()"
        }, 
        {
            "location": "/classes/database/#__get", 
            "text": "function __get($collectionName): MongoDB\\Collection  Select a collection within this database.  The Collection will inherit options (e.g. read preference, type map) from the\nDatabase object. Use  selectCollection()  to override any\noptions.  Note:  collections whose names contain special characters (e.g.  . ) may be\nselected with complex syntax (e.g.  $database- {\"system.profile\"} ) or selectCollection() .  Example  The following example selects the  demo.users  and  demo.system.profile \ncollections:  ?php\n\n$db = (new MongoDB\\Client)- demo;\n\n$users = $db- users;\n$systemProfile = $db- {'system.profile'};  See Also   MongoDB\\Database::selectCollection()  PHP Manual: Property Overloading", 
            "title": "__get()"
        }, 
        {
            "location": "/classes/database/#command", 
            "text": "function function command($command, array $options = []): MongoDB\\Driver\\Cursor  Execute a command on this database.  Supported Options   readPreference (MongoDB\\Driver\\ReadPreference)  The read preference to use when executing the command. This may be used when\nissuing the command to a replica set or mongos node to ensure that the\ndriver sets the wire protocol accordingly or adds the read preference to the\ncommand document, respectively.  typeMap (array)  Type map for BSON deserialization. This will be applied to the returned\nCursor (it is not sent to the server).   See Also   Tutorial: Database Commands  MongoDB Manual: Database Commands", 
            "title": "command()"
        }, 
        {
            "location": "/classes/database/#createcollection", 
            "text": "function createCollection($collectionName, array $options = []): array|object  Create a new collection explicitly. Returns the command result document.  MongoDB already creates collections implicitly when they are first referenced in\ncommands (e.g. inserting a document into a new collection); however, collections\nmay also be explicitly created with specific options. This is useful for\ncreating  capped collections , enabling document validation , or supplying storage engine options.  Supported Options   autoIndexId (boolean)  Specify false to disable the automatic creation of an index on the _id\nfield. For replica sets, this option cannot be false. The default is true.  capped (boolean)  Specify true to create a capped collection. If set, the size option must\nalso be specified. The default is false.  flags (integer)  Options for the MMAPv1 storage engine only. Must be a bitwise combination MongoDB\\Operation\\CreateCollection::USE_POWER_OF_2_SIZES  and MongoDB\\Operation\\CreateCollection::NO_PADDING . The default is MongoDB\\Operation\\CreateCollection::USE_POWER_OF_2_SIZES .  indexOptionDefaults (document)  Default configuration for indexes when creating the collection.  max (integer)  The maximum number of documents allowed in the capped collection. The size\noption takes precedence over this limit.  maxTimeMS (integer)  The maximum amount of time to allow the query to run.  size (integer)  The maximum number of bytes for a capped collection.  storageEngine (document)  Storage engine options.  typeMap (array)  Type map for BSON deserialization. This will only be used for the returned\ncommand result document.  validationAction (string)  Validation action.  validationLevel (string)  Validation level.  validator (document)  Validation rules or expressions.   Example  The following example creates the  demo.users  collection with a custom document validator  (available in MongoDB 3.2+):  ?php\n\n$db = (new MongoDB\\Client)- demo;\n\n$result = $db- createCollection('users', [\n    'validator' =  [\n        'username' =  ['$type' =  'string'],\n        'email' =  ['$regex' =  '@mongodb\\.com$'],\n    ],\n]);\n\nvar_dump($result);  The above example would output something similar to:  object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [ storage : ArrayObject :private]= \n  array(1) {\n    [ ok ]= \n    float(1)\n  }\n}  See Also   MongoDB Manual: create command", 
            "title": "createCollection"
        }, 
        {
            "location": "/classes/database/#drop", 
            "text": "function drop(array $options = []): array|object  Drop this database. Returns the command result document.  Supported Options   typeMap (array)  Type map for BSON deserialization. This will only be used for the returned\ncommand result document.   Example  The following example drops the  demo  database:  $db = (new MongoDB\\Client)- demo;\n\n$result = $db- drop();\n\nvar_dump($result);  The above example would output something similar to:  object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [ storage : ArrayObject :private]= \n  array(2) {\n    [ dropped ]= \n    string(4)  demo \n    [ ok ]= \n    float(1)\n  }\n}  See Also   MongoDB\\Client::dropDatabase()  MongoDB Manual: dropDatabase command", 
            "title": "drop"
        }, 
        {
            "location": "/classes/database/#dropcollection", 
            "text": "function dropCollection($collectionName, array $options = []): array|object  Drop a collection within this database. Returns the command result document.  Supported Options   typeMap (array)  Type map for BSON deserialization. This will only be used for the returned\ncommand result document.   Example  The following example drops the  demo.users  collection:  ?php\n\n$db = (new MongoDB\\Client)- demo;\n\n$result = $db- dropCollection('users');\n\nvar_dump($result);  The above example would output something similar to:  object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [ storage : ArrayObject :private]= \n  array(3) {\n    [ ns ]= \n    string(10)  demo.users \n    [ nIndexesWas ]= \n    int(1)\n    [ ok ]= \n    float(1)\n  }\n}  See Also   MongoDB\\Collection::drop()  MongoDB Manual: drop command", 
            "title": "dropCollection"
        }, 
        {
            "location": "/classes/database/#getdatabasename", 
            "text": "function getDatabaseName(): string  Return the database name.", 
            "title": "getDatabaseName()"
        }, 
        {
            "location": "/classes/database/#listcollections", 
            "text": "function listCollections(array $options = []): MongoDB\\Model\\CollectionInfoIterator  Returns information for all collections in this database. Elements in the\nreturned iterator will be MongoDB\\Model\\CollectionInfo objects.  Supported Options   filter (document)  Query by which to filter collections.  maxTimeMS (integer)  The maximum amount of time to allow the query to run.   Example  The following example lists all collections in the  demo  database:  ?php\n\n$db = (new MongoDB\\Client)- demo;\n\nforeach ($db- listCollections() as $collectionInfo) {\n    var_dump($collectionInfo);\n}  The above example would output something similar to:  object(MongoDB\\Model\\CollectionInfo)#8 (2) {\n  [ name ]= \n  string(5)  users \n  [ options ]= \n  array(0) {\n  }\n}\nobject(MongoDB\\Model\\CollectionInfo)#13 (2) {\n  [ name ]= \n  string(14)  system.profile \n  [ options ]= \n  array(2) {\n    [ capped ]= \n    bool(true)\n    [ size ]= \n    int(1048576)\n  }\n}  See Also   MongoDB Manual: listCollections command  MongoDB Specification: Enumerating Collections", 
            "title": "listCollections()"
        }, 
        {
            "location": "/classes/database/#selectcollection", 
            "text": "function selectCollection($collectionName, array $options = []): MongoDB\\Collection  Select a collection within this database.  The Collection will inherit options (e.g. read preference, type map) from the\nDatabase object unless otherwise specified.  Supported Options   readConcern (MongoDB\\Driver\\ReadConcern)  The default read concern to use for collection operations. Defaults to the\nDatabase s read concern.  readPreference (MongoDB\\Driver\\ReadPreference)  The default read preference to use for collection operations. Defaults to\nthe Database s read preference.  typeMap (array)  Default type map for cursors and BSON documents. Defaults to the Database s\ntype map.  writeConcern (MongoDB\\Driver\\WriteConcern)  The default write concern to use for collection operations. Defaults to the\nDatabase s write concern.   Example  The following example selects the  demo.users  collection:  ?php\n\n$db = (new MongoDB\\Client)- demo;\n\n$collection = $db- selectCollection('users');  The following examples selects the  demo.users  collection with a custom read\npreference:  ?php\n\n$db = (new MongoDB\\Client)- demo;\n\n$collection = $db- selectCollection(\n    'users',\n    [\n        'readPreference' =  new MongoDB\\Driver\\ReadPreference(MongoDB\\Driver\\ReadPreference::RP_SECONDARY),\n    ]\n);  See Also   MongoDB\\Collection::__construct()  MongoDB\\Database::__get()", 
            "title": "selectCollection()"
        }, 
        {
            "location": "/classes/database/#withoptions", 
            "text": "function withOptions(array $options = []): MongoDB\\Database  Returns a clone of this database with different options.  Supported Options   readConcern (MongoDB\\Driver\\ReadConcern)  The default read concern to use for database operations and selected\ncollections. Defaults to the Manager s read concern.  readPreference (MongoDB\\Driver\\ReadPreference)  The default read preference to use for database operations and selected\ncollections. Defaults to the Manager s read preference.  typeMap (array)  Default type map for cursors and BSON documents.  writeConcern (MongoDB\\Driver\\WriteConcern)  The default write concern to use for database operations and selected\ncollections. Defaults to the Manager s write concern.   See Also   MongoDB\\Database::__construct()", 
            "title": "withOptions()"
        }, 
        {
            "location": "/classes/collection/", 
            "text": "MongoDB\\Collection\n\n\nThe MongoDB\\Collection class provides methods for common operations on a\ncollection and its documents. This includes, but is not limited to, CRUD\noperations (e.g. inserting, querying, counting) and managing indexes.\n\n\nA Collection may be constructed directly (using the extension\ns Manager class),\nselected from the library\ns \nClient\n or \nDatabase\n\nclasses, or cloned from an existing Collection via\n\nwithOptions()\n. It supports the following options:\n\n\n\n\nreadConcern\n\n\nreadPreference\n\n\ntypeMap\n\n\nwriteConcern\n\n\n\n\nOperations within the Collection class (e.g. \nfind()\n,\n\ninsertOne()\n) will generally inherit the Collection\ns options. One\nnotable exception to this rule is that \naggregate()\n (when not using\na cursor), \ndistinct()\n, and the \nfindAndModify\n\nhelpers do not yet support a \ntypeMap\n option due to a driver limitation. This\nmeans that they will always return BSON documents and arrays as stdClass objects\nand arrays, respectively.\n\n\n\n\n__construct()\n\n\nfunction __construct(MongoDB\\Driver\\Manager $manager, $databaseName, $collectionName, array $options = [])\n\n\n\n\nIf the Collection is constructed explicitly, any omitted options will be\ninherited from the Manager object. If the Collection is selected from a\n\nClient\n or \nDatabase\n object, options will be\ninherited from that object.\n\n\nSupported Options\n\n\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nThe default read concern to use for collection operations. Defaults to the\nManager\ns read concern.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nThe default read preference to use for collection operations. Defaults to\nthe Manager\ns read preference.\n\n\ntypeMap (array)\n\n\nDefault type map for cursors and BSON documents.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nThe default write concern to use for collection operations. Defaults to the\nManager\ns write concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::withOptions()\n\n\nMongoDB\\Database::selectCollection()\n\n\n\n\n\n\naggregate()\n\n\nfunction aggregate(array $pipeline, array $options = []): Traversable\n\n\n\n\nExecutes an aggregation framework pipeline on the collection.\n\n\nThis method\ns return value depends on the MongoDB server version and the\n\nuseCursor\n option. If \nuseCursor\n is true, a MongoDB\\Driver\\Cursor will be\nreturned; otherwise, an ArrayIterator is returned, which wraps the \nresult\n\narray from the command response document.\n\n\nNote:\n BSON deserialization of inline aggregation results (i.e. not using a\ncommand cursor) does not yet support a custom type map. Support is pending new\nfunctionality in the driver.\n\n\nSupported Options\n\n\n\n\nallowDiskUse (boolean)\n\n\nEnables writing to temporary files. When set to true, aggregation stages can\nwrite data to the _tmp sub-directory in the dbPath directory. The default is\nfalse.\n\n\nbatchSize (integer)\n\n\nThe number of documents to return per batch.\n\n\nbypassDocumentValidation (boolean)\n\n\nIf true, allows the write to opt out of document level validation. This only\napplies when the $out stage is specified.\n\n\nFor servers \n 3.2, this option is ignored as document level validation is\nnot available.\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run.\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nRead concern. Note that a \nmajority\n read concern is not compatible with the\n$out stage.\n\n\nFor servers \n 3.2, this option is ignored as read concern is not available.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nRead preference.\n\n\ntypeMap (array)\n\n\nType map for BSON deserialization. This will be applied to the returned\nCursor (it is not sent to the server).\n\n\nThis is currently not supported for inline aggregation results (i.e.\nuseCursor option is false or the server versions \n 2.6).\n\n\nuseCursor (boolean)\n\n\nIndicates whether the command will request that the server provide results\nusing a cursor. The default is true.\n\n\nFor servers \n 2.6, this option is ignored as aggregation cursors are not\navailable.\n\n\nFor servers \n= 2.6, this option allows users to turn off cursors if\nnecessary to aid in mongod/mongos upgrades.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB Manual: aggregate command\n\n\n\n\n\n\nbulkWrite()\n\n\nfunction bulkWrite(array $operations, array $options = []): MongoDB\\BulkWriteResult\n\n\n\n\nExecutes multiple write operations.\n\n\nOperations Example\n\n\nExample array structure for all supported operation types:\n\n\n[\n    [ 'deleteMany' =\n [ $filter ] ],\n    [ 'deleteOne'  =\n [ $filter ] ],\n    [ 'insertOne'  =\n [ $document ] ],\n    [ 'replaceOne' =\n [ $filter, $replacement, $options ] ],\n    [ 'updateMany' =\n [ $filter, $update, $options ] ],\n    [ 'updateOne'  =\n [ $filter, $update, $options ] ],\n]\n\n\n\n\nArguments correspond to the respective operation methods; however, the\n\nwriteConcern\n option is specified for the top-level bulk write operation\ninstead of each individual operation.\n\n\nSupported Options\n\n\n\n\nbypassDocumentValidation (boolean)\n\n\nIf true, allows the write to opt out of document level validation.\n\n\nordered (boolean)\n\n\nIf true, when an insert fails, return without performing the remaining\nwrites. If false, when a write fails, continue with the remaining writes, if\nany. The default is true.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nWrite concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::deleteMany()\n\n\nMongoDB\\Collection::deleteOne()\n\n\nMongoDB\\Collection::insertOne()\n\n\nMongoDB\\Collection::replaceOne()\n\n\nMongoDB\\Collection::updateMany()\n\n\nMongoDB\\Collection::updateOne()\n\n\nTutorial: CRUD Operations\n\n\n\n\n\n\ncount()\n\n\nfunction count($filter = [], array $options = []): integer\n\n\n\n\nGets the number of documents matching the filter. Returns the number of matched\ndocuments as an integer.\n\n\nSupported Options\n\n\n\n\nhint (string|document)\n\n\nThe index to use. If a document, it will be interpretted as an index\nspecification and a name will be generated.\n\n\nlimit (integer)\n\n\nThe maximum number of documents to count.\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run.\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nRead concern.\n\n\nFor servers \n 3.2, this option is ignored as read concern is not available.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nRead preference.\n\n\nskip (integer)\n\n\nThe number of documents to skip before returning the documents.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB Manual: count command\n\n\n\n\n\n\ncreateIndex()\n\n\nfunction createIndex($key, array $options = []): string\n\n\n\n\nCreate a single index for the collection. Returns the name of the created index\nas a string.\n\n\nKey Example\n\n\nThe \n$key\n argument must be a document containing one or more fields mapped to\nan order or type. For example:\n\n\n// Ascending index on the \nusername\n field\n$key = [ 'username' =\n 1 ];\n\n// 2dsphere index on the \nloc\n field with a secondary index on \ncreated_at\n\n$key = [ 'loc' =\n '2dsphere', 'created_at' =\n 1 ];\n\n\n\n\nSupported Options\n\n\nIndex options are documented in the \nMongoDB manual\n.\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::createIndexes()\n\n\nTutorial: Indexes\n\n\nMongoDB Manual: createIndexes command\n\n\nMongoDB Manual: Indexes\n\n\n\n\n\n\ncreateIndexes()\n\n\nfunction createIndexes(array $indexes): string[]\n\n\n\n\nCreate one or more indexes for the collection. Returns the names of the created\nindexes as an array of strings.\n\n\nIndexes Array\n\n\nEach element in the \n$indexes\n array must have a \nkey\n document, which contains\nfields mapped to an order or type. Other options may follow. For example:\n\n\n[\n    // Create a unique index on the \nusername\n field\n    [ 'key' =\n [ 'username' =\n 1 ], 'unique' =\n true ],\n    // Create a 2dsphere index on the \nloc\n field with a custom name\n    [ 'key' =\n [ 'loc' =\n '2dsphere' ], 'name' =\n 'geo' ],\n]\n\n\n\n\nIf the \nname\n option is unspecified, a name will be generated from the \nkey\n\ndocument.\n\n\nIndex options are documented in the \nMongoDB manual\n.\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::createIndex()\n\n\nTutorial: Indexes\n\n\nMongoDB Manual: createIndexes command\n\n\nMongoDB Manual: Indexes\n\n\n\n\n\n\ndeleteMany()\n\n\nfunction deleteMany($filter, array $options = []): MongoDB\\DeleteResult\n\n\n\n\nDeletes all documents matching the filter.\n\n\nSupported Options\n\n\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nWrite concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::bulkWrite()\n\n\nMongoDB\\Collection::deleteOne()\n\n\nTutorial: CRUD Operations\n\n\nMongoDB Manual: delete command\n\n\n\n\n\n\ndeleteOne()\n\n\nfunction deleteOne($filter, array $options = []): MongoDB\\DeleteResult\n\n\n\n\nDeletes at most one document matching the filter.\n\n\nSupported Options\n\n\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nWrite concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::bulkWrite()\n\n\nMongoDB\\Collection::deleteMany()\n\n\nTutorial: CRUD Operations\n\n\nMongoDB Manual: delete command\n\n\n\n\n\n\ndistinct()\n\n\nfunction distinct($fieldName, $filter = [], array $options = []): mixed[]\n\n\n\n\nFinds the distinct values for a specified field across the collection. Returns\nan array of the distinct values.\n\n\nSupported Options\n\n\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run.\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nRead concern.\n\n\nFor servers \n 3.2, this option is ignored as read concern is not available.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nRead preference.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB Manual: distinct command\n\n\n\n\n\n\ndrop()\n\n\nfunction drop(array $options = []): array|object\n\n\n\n\nDrop this collection. Returns the command result document.\n\n\nSupported Options\n\n\n\n\ntypeMap (array)\n\n\nType map for BSON deserialization. This will be used for the returned\ncommand result document.\n\n\n\n\nExample\n\n\nThe following example drops the \ndemo.zips\n collection:\n\n\n?php\n\n$collection = (new MongoDB\\Client)-\ndemo-\nzips;\n\n$result = $collection-\ndrop();\n\nvar_dump($result);\n\n\n\n\nThe above example would output something similar to:\n\n\nobject(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [\nstorage\n:\nArrayObject\n:private]=\n\n  array(3) {\n    [\nns\n]=\n\n    string(9) \ndemo.zips\n\n    [\nnIndexesWas\n]=\n\n    int(1)\n    [\nok\n]=\n\n    float(1)\n  }\n}\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Database::dropCollection()\n\n\nMongoDB Manual: drop command\n\n\n\n\n\n\ndropIndex()\n\n\nfunction dropIndex($indexName, array $options = []): array|object\n\n\n\n\nDrop a single index in the collection. Returns the command result document.\n\n\nSupported Options\n\n\n\n\ntypeMap (array)\n\n\nType map for BSON deserialization. This will be used for the returned\ncommand result document.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::dropIndexes()\n\n\nTutorial: Indexes\n\n\nMongoDB Manual: dropIndexes command\n\n\nMongoDB Manual: Indexes\n\n\n\n\n\n\ndropIndexes()\n\n\nfunction dropIndexes(array $options = []): array|object\n\n\n\n\nDrop all indexes in the collection. Returns the command result document.\n\n\nSupported Options\n\n\n\n\ntypeMap (array)\n\n\nType map for BSON deserialization. This will be used for the returned\ncommand result document.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::dropIndex()\n\n\nTutorial: Indexes\n\n\nMongoDB Manual: dropIndexes command\n\n\nMongoDB Manual: Indexes\n\n\n\n\n\n\nfind()\n\n\nfunction find($filter = [], array $options = []): MongoDB\\Driver\\Cursor\n\n\n\n\nFinds documents matching the query. Returns a MongoDB\\Driver\\Cursor.\n\n\nSupported Options\n\n\n\n\nallowPartialResults (boolean)\n\n\nGet partial results from a mongos if some shards are inaccessible (instead\nof throwing an error).\n\n\nbatchSize (integer)\n\n\nThe number of documents to return per batch.\n\n\ncomment (string)\n\n\nAttaches a comment to the query. If \n$comment\n also exists in the modifiers\ndocument, this option will take precedence.\n\n\ncursorType (enum)\n\n\nIndicates the type of cursor to use. Must be either NON_TAILABLE, TAILABLE,\nor TAILABLE_AWAIT. The default is NON_TAILABLE.\n\n\nlimit (integer)\n\n\nThe maximum number of documents to return.\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run. If \n$maxTimeMS\n also\nexists in the modifiers document, this option will take precedence.\n\n\nmodifiers (document)\n\n\nMeta-operators modifying the output or behavior of a query.\n\n\nnoCursorTimeout (boolean)\n\n\nThe server normally times out idle cursors after an inactivity period (10\nminutes) to prevent excess memory use. Set this option to prevent that.\n\n\noplogReplay (boolean)\n\n\nInternal replication use only. The driver should not set this.\n\n\nprojection (document)\n\n\nLimits the fields to return for the matching document.\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nRead concern.\n\n\nFor servers \n 3.2, this option is ignored as read concern is not\navailable.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nRead preference.\n\n\nskip (integer)\n\n\nThe number of documents to skip before returning.\n\n\nsort (document)\n\n\nThe order in which to return matching documents. If \n$orderby\n also exists\nin the modifiers document, this option will take precedence.\n\n\ntypeMap (array)\n\n\nType map for BSON deserialization. This will be applied to the returned\nCursor (it is not sent to the server).\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::findOne()\n\n\nMongoDB Manual: find command\n\n\n\n\n\n\nfindOne()\n\n\nfunction findOne($filter = [], array $options = []): array|object\n\n\n\n\nFinds a single document matching the query. Returns the matching document or\nnull.\n\n\nSupported Options\n\n\n\n\ncomment (string)\n\n\nAttaches a comment to the query. If \n$comment\n also exists in the modifiers\ndocument, this option will take precedence.\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run. If \n$maxTimeMS\n also\nexists in the modifiers document, this option will take precedence.\n\n\nmodifiers (document)\n\n\nMeta-operators modifying the output or behavior of a query.\n\n\nprojection (document)\n\n\nLimits the fields to return for the matching document.\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nRead concern.\n\n\nFor servers \n 3.2, this option is ignored as read concern is not available.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nRead preference.\n\n\nskip (integer)\n\n\nThe number of documents to skip before returning.\n\n\nsort (document)\n\n\nThe order in which to return matching documents. If \n$orderby\n also exists\nin the modifiers document, this option will take precedence.\n\n\ntypeMap (array)\n\n\nType map for BSON deserialization.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::find()\n\n\nMongoDB Manual: find command\n\n\n\n\n\n\nfindOneAndDelete()\n\n\nfunction findOneAndDelete($filter, array $options = []): object|null\n\n\n\n\nFinds a single document and deletes it, returning the original. The document to\nreturn may be null if no document matched the filter.\n\n\nNote:\n BSON deserialization of the returned document does not yet support a\ncustom type map. Support is pending new functionality in the driver.\n\n\nSupported Options\n\n\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run.\n\n\nprojection (document)\n\n\nLimits the fields to return for the matching document.\n\n\nsort (document)\n\n\nDetermines which document the operation modifies if the query selects\nmultiple documents.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nWrite concern. This option is only supported for server versions \n= 3.2.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::findOneAndReplace()\n\n\nMongoDB\\Collection::findOneAndUpdate()\n\n\nMongoDB Manual: findAndModify command\n\n\n\n\n\n\nfindOneAndReplace()\n\n\nfunction findOneAndReplace($filter, $replacement, array $options = []): object|null\n\n\n\n\nFinds a single document and replaces it, returning either the original or the\nreplaced document.\n\n\nThe document to return may be null if no document matched the filter. By\ndefault, the original document is returned. Specify\n\nMongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_AFTER\n for the\n\nreturnDocument\n option to return the updated document.\n\n\nNote:\n BSON deserialization of the returned document does not yet support a\ncustom type map. Support is pending new functionality in the driver.\n\n\nSupported Options\n\n\n\n\nbypassDocumentValidation (boolean)\n\n\nIf true, allows the write to opt out of document level validation.\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run.\n\n\nprojection (document)\n\n\nLimits the fields to return for the matching document.\n\n\nreturnDocument (enum)\n\n\nWhether to return the document before or after the update is applied. Must\nbe either \nMongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_BEFORE\n or\n\nMongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_AFTER\n. The default is\n\nMongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_BEFORE\n.\n\n\nsort (document)\n\n\nDetermines which document the operation modifies if the query selects\nmultiple documents.\n\n\nupsert (boolean)\n\n\nWhen true, a new document is created if no document matches the query. The\ndefault is false.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nWrite concern. This option is only supported for server versions \n= 3.2.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::findOneAndDelete()\n\n\nMongoDB\\Collection::findOneAndUpdate()\n\n\nMongoDB Manual: findAndModify command\n\n\n\n\n\n\nfindOneAndUpdate()\n\n\nfunction findOneAndUpdate($filter, $update, array $options = []): object|null\n\n\n\n\nFinds a single document and updates it, returning either the original or the\nupdated document.\n\n\nThe document to return may be null if no document matched the filter. By\ndefault, the original document is returned. Specify\n\nMongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_AFTER\n for the\n\nreturnDocument\n option to return the updated document.\n\n\nNote:\n BSON deserialization of the returned document does not yet support a\ncustom type map. Support is pending new functionality in the driver.\n\n\nSupported Options\n\n\n\n\nbypassDocumentValidation (boolean)\n\n\nIf true, allows the write to opt out of document level validation.\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run.\n\n\nprojection (document)\n\n\nLimits the fields to return for the matching document.\n\n\nreturnDocument (enum)\n\n\nWhether to return the document before or after the update is applied. Must\nbe either \nMongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_BEFORE\n or\n\nMongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_AFTER\n. The default is\n\nMongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_BEFORE\n.\n\n\nsort (document)\n\n\nDetermines which document the operation modifies if the query selects\nmultiple documents.\n\n\nupsert (boolean)\n\n\nWhen true, a new document is created if no document matches the query. The\ndefault is false.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nWrite concern. This option is only supported for server versions \n= 3.2.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::findOneAndDelete()\n\n\nMongoDB\\Collection::findOneAndReplace()\n\n\nMongoDB Manual: findAndModify command\n\n\n\n\n\n\ngetCollectionName()\n\n\nfunction getCollectionName(): string\n\n\n\n\nReturn the collection name.\n\n\n\n\ngetDatabaseName()\n\n\nfunction getDatabaseName(): string\n\n\n\n\nReturn the database name.\n\n\n\n\ngetNamespace()\n\n\nfunction getNamespace(): string\n\n\n\n\nReturn the collection namespace.\n\n\nSee Also\n\n\n\n\nMongoDB Manual: namespace\n\n\n\n\n\n\ninsertMany()\n\n\nfunction insertMany(array $documents, array $options = []): MongoDB\\InsertManyResult\n\n\n\n\nInserts multiple documents.\n\n\nSupported Options\n\n\n\n\nbypassDocumentValidation (boolean)\n\n\nIf true, allows the write to opt out of document level validation.\n\n\nordered (boolean)\n\n\nIf true, when an insert fails, return without performing the remaining\nwrites. If false, when a write fails, continue with the remaining writes, if\nany. The default is true.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nWrite concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::bulkWrite()\n\n\nMongoDB\\Collection::insertOne()\n\n\nTutorial: CRUD Operations\n\n\nMongoDB Manual: insert command\n\n\n\n\n\n\ninsertOne()\n\n\nfunction insertOne($document, array $options = []): MongoDB\\InsertOneResult\n\n\n\n\nInserts one document.\n\n\nSupported Options\n\n\n\n\nbypassDocumentValidation (boolean)\n\n\nIf true, allows the write to opt out of document level validation.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nWrite concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::bulkWrite()\n\n\nMongoDB\\Collection::insertMany()\n\n\nTutorial: CRUD Operations\n\n\nMongoDB Manual: insert command\n\n\n\n\n\n\nlistIndexes()\n\n\nfunction listIndexes(array $options = []): MongoDB\\Model\\IndexInfoIterator\n\n\n\n\nReturns information for all indexes for the collection. Elements in the returned\niterator will be MongoDB\\Model\\IndexInfo objects.\n\n\nSupported Options\n\n\n\n\nmaxTimeMS (integer)\n\n\nThe maximum amount of time to allow the query to run.\n\n\n\n\nSee Also\n\n\n\n\nTutorial: Indexes\n\n\nMongoDB Manual: listIndexes command\n\n\nMongoDB Manual: Indexes\n\n\nMongoDB Specification: Enumerating Collections\n\n\n\n\n\n\nreplaceOne()\n\n\nfunction replaceOne($filter, $replacement, array $options = []): MongoDB\\UpdateResult\n\n\n\n\nReplaces at most one document matching the filter.\n\n\nSupported Options\n\n\n\n\nbypassDocumentValidation (boolean)\n\n\nIf true, allows the write to opt out of document level validation.\n\n\nupsert (boolean)\n\n\nWhen true, a new document is created if no document matches the query. The\ndefault is false.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nWrite concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::bulkWrite()\n\n\nMongoDB\\Collection::updateMany()\n\n\nMongoDB\\Collection::updateOne()\n\n\nTutorial: CRUD Operations\n\n\nMongoDB Manual: update command\n\n\n\n\n\n\nupdateMany()\n\n\nfunction updateMany($filter, $update, array $options = []): MongoDB\\UpdateResult\n\n\n\n\nUpdates all documents matching the filter.\n\n\nSupported Options\n\n\n\n\nbypassDocumentValidation (boolean)\n\n\nIf true, allows the write to opt out of document level validation.\n\n\nupsert (boolean)\n\n\nWhen true, a new document is created if no document matches the query. The\ndefault is false.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nWrite concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::bulkWrite()\n\n\nMongoDB\\Collection::replaceOne()\n\n\nMongoDB\\Collection::updateOne()\n\n\nTutorial: CRUD Operations\n\n\nMongoDB Manual: update command\n\n\n\n\n\n\nupdateOne()\n\n\nfunction updateOne($filter, $update, array $options = []): MongoDB\\UpdateResult\n\n\n\n\nUpdates at most one document matching the filter.\n\n\nSupported Options\n\n\n\n\nbypassDocumentValidation (boolean)\n\n\nIf true, allows the write to opt out of document level validation.\n\n\nupsert (boolean)\n\n\nWhen true, a new document is created if no document matches the query. The\ndefault is false.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nWrite concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::bulkWrite()\n\n\nMongoDB\\Collection::replaceOne()\n\n\nMongoDB\\Collection::updateMany()\n\n\nTutorial: CRUD Operations\n\n\nMongoDB Manual: update command\n\n\n\n\n\n\nwithOptions()\n\n\nfunction withOptions(array $options = []): MongoDB\\Collection\n\n\n\n\nReturns a clone of this Collection with different options.\n\n\nSupported Options\n\n\n\n\nreadConcern (MongoDB\\Driver\\ReadConcern)\n\n\nThe default read concern to use for collection operations. Defaults to the\nManager\ns read concern.\n\n\nreadPreference (MongoDB\\Driver\\ReadPreference)\n\n\nThe default read preference to use for collection operations. Defaults to\nthe Manager\ns read preference.\n\n\ntypeMap (array)\n\n\nDefault type map for cursors and BSON documents.\n\n\nwriteConcern (MongoDB\\Driver\\WriteConcern)\n\n\nThe default write concern to use for collection operations. Defaults to the\nManager\ns write concern.\n\n\n\n\nSee Also\n\n\n\n\nMongoDB\\Collection::__construct()", 
            "title": "Collection"
        }, 
        {
            "location": "/classes/collection/#mongodbcollection", 
            "text": "The MongoDB\\Collection class provides methods for common operations on a\ncollection and its documents. This includes, but is not limited to, CRUD\noperations (e.g. inserting, querying, counting) and managing indexes.  A Collection may be constructed directly (using the extension s Manager class),\nselected from the library s  Client  or  Database \nclasses, or cloned from an existing Collection via withOptions() . It supports the following options:   readConcern  readPreference  typeMap  writeConcern   Operations within the Collection class (e.g.  find() , insertOne() ) will generally inherit the Collection s options. One\nnotable exception to this rule is that  aggregate()  (when not using\na cursor),  distinct() , and the  findAndModify \nhelpers do not yet support a  typeMap  option due to a driver limitation. This\nmeans that they will always return BSON documents and arrays as stdClass objects\nand arrays, respectively.", 
            "title": "MongoDB\\Collection"
        }, 
        {
            "location": "/classes/collection/#__construct", 
            "text": "function __construct(MongoDB\\Driver\\Manager $manager, $databaseName, $collectionName, array $options = [])  If the Collection is constructed explicitly, any omitted options will be\ninherited from the Manager object. If the Collection is selected from a Client  or  Database  object, options will be\ninherited from that object.  Supported Options   readConcern (MongoDB\\Driver\\ReadConcern)  The default read concern to use for collection operations. Defaults to the\nManager s read concern.  readPreference (MongoDB\\Driver\\ReadPreference)  The default read preference to use for collection operations. Defaults to\nthe Manager s read preference.  typeMap (array)  Default type map for cursors and BSON documents.  writeConcern (MongoDB\\Driver\\WriteConcern)  The default write concern to use for collection operations. Defaults to the\nManager s write concern.   See Also   MongoDB\\Collection::withOptions()  MongoDB\\Database::selectCollection()", 
            "title": "__construct()"
        }, 
        {
            "location": "/classes/collection/#aggregate", 
            "text": "function aggregate(array $pipeline, array $options = []): Traversable  Executes an aggregation framework pipeline on the collection.  This method s return value depends on the MongoDB server version and the useCursor  option. If  useCursor  is true, a MongoDB\\Driver\\Cursor will be\nreturned; otherwise, an ArrayIterator is returned, which wraps the  result \narray from the command response document.  Note:  BSON deserialization of inline aggregation results (i.e. not using a\ncommand cursor) does not yet support a custom type map. Support is pending new\nfunctionality in the driver.  Supported Options   allowDiskUse (boolean)  Enables writing to temporary files. When set to true, aggregation stages can\nwrite data to the _tmp sub-directory in the dbPath directory. The default is\nfalse.  batchSize (integer)  The number of documents to return per batch.  bypassDocumentValidation (boolean)  If true, allows the write to opt out of document level validation. This only\napplies when the $out stage is specified. \nFor servers   3.2, this option is ignored as document level validation is\nnot available.  maxTimeMS (integer)  The maximum amount of time to allow the query to run.  readConcern (MongoDB\\Driver\\ReadConcern)  Read concern. Note that a  majority  read concern is not compatible with the\n$out stage. \nFor servers   3.2, this option is ignored as read concern is not available.  readPreference (MongoDB\\Driver\\ReadPreference)  Read preference.  typeMap (array)  Type map for BSON deserialization. This will be applied to the returned\nCursor (it is not sent to the server). \nThis is currently not supported for inline aggregation results (i.e.\nuseCursor option is false or the server versions   2.6).  useCursor (boolean)  Indicates whether the command will request that the server provide results\nusing a cursor. The default is true. \nFor servers   2.6, this option is ignored as aggregation cursors are not\navailable. \nFor servers  = 2.6, this option allows users to turn off cursors if\nnecessary to aid in mongod/mongos upgrades.   See Also   MongoDB Manual: aggregate command", 
            "title": "aggregate()"
        }, 
        {
            "location": "/classes/collection/#bulkwrite", 
            "text": "function bulkWrite(array $operations, array $options = []): MongoDB\\BulkWriteResult  Executes multiple write operations.  Operations Example  Example array structure for all supported operation types:  [\n    [ 'deleteMany' =  [ $filter ] ],\n    [ 'deleteOne'  =  [ $filter ] ],\n    [ 'insertOne'  =  [ $document ] ],\n    [ 'replaceOne' =  [ $filter, $replacement, $options ] ],\n    [ 'updateMany' =  [ $filter, $update, $options ] ],\n    [ 'updateOne'  =  [ $filter, $update, $options ] ],\n]  Arguments correspond to the respective operation methods; however, the writeConcern  option is specified for the top-level bulk write operation\ninstead of each individual operation.  Supported Options   bypassDocumentValidation (boolean)  If true, allows the write to opt out of document level validation.  ordered (boolean)  If true, when an insert fails, return without performing the remaining\nwrites. If false, when a write fails, continue with the remaining writes, if\nany. The default is true.  writeConcern (MongoDB\\Driver\\WriteConcern)  Write concern.   See Also   MongoDB\\Collection::deleteMany()  MongoDB\\Collection::deleteOne()  MongoDB\\Collection::insertOne()  MongoDB\\Collection::replaceOne()  MongoDB\\Collection::updateMany()  MongoDB\\Collection::updateOne()  Tutorial: CRUD Operations", 
            "title": "bulkWrite()"
        }, 
        {
            "location": "/classes/collection/#count", 
            "text": "function count($filter = [], array $options = []): integer  Gets the number of documents matching the filter. Returns the number of matched\ndocuments as an integer.  Supported Options   hint (string|document)  The index to use. If a document, it will be interpretted as an index\nspecification and a name will be generated.  limit (integer)  The maximum number of documents to count.  maxTimeMS (integer)  The maximum amount of time to allow the query to run.  readConcern (MongoDB\\Driver\\ReadConcern)  Read concern. \nFor servers   3.2, this option is ignored as read concern is not available.  readPreference (MongoDB\\Driver\\ReadPreference)  Read preference.  skip (integer)  The number of documents to skip before returning the documents.   See Also   MongoDB Manual: count command", 
            "title": "count()"
        }, 
        {
            "location": "/classes/collection/#createindex", 
            "text": "function createIndex($key, array $options = []): string  Create a single index for the collection. Returns the name of the created index\nas a string.  Key Example  The  $key  argument must be a document containing one or more fields mapped to\nan order or type. For example:  // Ascending index on the  username  field\n$key = [ 'username' =  1 ];\n\n// 2dsphere index on the  loc  field with a secondary index on  created_at \n$key = [ 'loc' =  '2dsphere', 'created_at' =  1 ];  Supported Options  Index options are documented in the  MongoDB manual .  See Also   MongoDB\\Collection::createIndexes()  Tutorial: Indexes  MongoDB Manual: createIndexes command  MongoDB Manual: Indexes", 
            "title": "createIndex()"
        }, 
        {
            "location": "/classes/collection/#createindexes", 
            "text": "function createIndexes(array $indexes): string[]  Create one or more indexes for the collection. Returns the names of the created\nindexes as an array of strings.  Indexes Array  Each element in the  $indexes  array must have a  key  document, which contains\nfields mapped to an order or type. Other options may follow. For example:  [\n    // Create a unique index on the  username  field\n    [ 'key' =  [ 'username' =  1 ], 'unique' =  true ],\n    // Create a 2dsphere index on the  loc  field with a custom name\n    [ 'key' =  [ 'loc' =  '2dsphere' ], 'name' =  'geo' ],\n]  If the  name  option is unspecified, a name will be generated from the  key \ndocument.  Index options are documented in the  MongoDB manual .  See Also   MongoDB\\Collection::createIndex()  Tutorial: Indexes  MongoDB Manual: createIndexes command  MongoDB Manual: Indexes", 
            "title": "createIndexes()"
        }, 
        {
            "location": "/classes/collection/#deletemany", 
            "text": "function deleteMany($filter, array $options = []): MongoDB\\DeleteResult  Deletes all documents matching the filter.  Supported Options   writeConcern (MongoDB\\Driver\\WriteConcern)  Write concern.   See Also   MongoDB\\Collection::bulkWrite()  MongoDB\\Collection::deleteOne()  Tutorial: CRUD Operations  MongoDB Manual: delete command", 
            "title": "deleteMany()"
        }, 
        {
            "location": "/classes/collection/#deleteone", 
            "text": "function deleteOne($filter, array $options = []): MongoDB\\DeleteResult  Deletes at most one document matching the filter.  Supported Options   writeConcern (MongoDB\\Driver\\WriteConcern)  Write concern.   See Also   MongoDB\\Collection::bulkWrite()  MongoDB\\Collection::deleteMany()  Tutorial: CRUD Operations  MongoDB Manual: delete command", 
            "title": "deleteOne()"
        }, 
        {
            "location": "/classes/collection/#distinct", 
            "text": "function distinct($fieldName, $filter = [], array $options = []): mixed[]  Finds the distinct values for a specified field across the collection. Returns\nan array of the distinct values.  Supported Options   maxTimeMS (integer)  The maximum amount of time to allow the query to run.  readConcern (MongoDB\\Driver\\ReadConcern)  Read concern. \nFor servers   3.2, this option is ignored as read concern is not available.  readPreference (MongoDB\\Driver\\ReadPreference)  Read preference.   See Also   MongoDB Manual: distinct command", 
            "title": "distinct()"
        }, 
        {
            "location": "/classes/collection/#drop", 
            "text": "function drop(array $options = []): array|object  Drop this collection. Returns the command result document.  Supported Options   typeMap (array)  Type map for BSON deserialization. This will be used for the returned\ncommand result document.   Example  The following example drops the  demo.zips  collection:  ?php\n\n$collection = (new MongoDB\\Client)- demo- zips;\n\n$result = $collection- drop();\n\nvar_dump($result);  The above example would output something similar to:  object(MongoDB\\Model\\BSONDocument)#11 (1) {\n  [ storage : ArrayObject :private]= \n  array(3) {\n    [ ns ]= \n    string(9)  demo.zips \n    [ nIndexesWas ]= \n    int(1)\n    [ ok ]= \n    float(1)\n  }\n}  See Also   MongoDB\\Database::dropCollection()  MongoDB Manual: drop command", 
            "title": "drop()"
        }, 
        {
            "location": "/classes/collection/#dropindex", 
            "text": "function dropIndex($indexName, array $options = []): array|object  Drop a single index in the collection. Returns the command result document.  Supported Options   typeMap (array)  Type map for BSON deserialization. This will be used for the returned\ncommand result document.   See Also   MongoDB\\Collection::dropIndexes()  Tutorial: Indexes  MongoDB Manual: dropIndexes command  MongoDB Manual: Indexes", 
            "title": "dropIndex()"
        }, 
        {
            "location": "/classes/collection/#dropindexes", 
            "text": "function dropIndexes(array $options = []): array|object  Drop all indexes in the collection. Returns the command result document.  Supported Options   typeMap (array)  Type map for BSON deserialization. This will be used for the returned\ncommand result document.   See Also   MongoDB\\Collection::dropIndex()  Tutorial: Indexes  MongoDB Manual: dropIndexes command  MongoDB Manual: Indexes", 
            "title": "dropIndexes()"
        }, 
        {
            "location": "/classes/collection/#find", 
            "text": "function find($filter = [], array $options = []): MongoDB\\Driver\\Cursor  Finds documents matching the query. Returns a MongoDB\\Driver\\Cursor.  Supported Options   allowPartialResults (boolean)  Get partial results from a mongos if some shards are inaccessible (instead\nof throwing an error).  batchSize (integer)  The number of documents to return per batch.  comment (string)  Attaches a comment to the query. If  $comment  also exists in the modifiers\ndocument, this option will take precedence.  cursorType (enum)  Indicates the type of cursor to use. Must be either NON_TAILABLE, TAILABLE,\nor TAILABLE_AWAIT. The default is NON_TAILABLE.  limit (integer)  The maximum number of documents to return.  maxTimeMS (integer)  The maximum amount of time to allow the query to run. If  $maxTimeMS  also\nexists in the modifiers document, this option will take precedence.  modifiers (document)  Meta-operators modifying the output or behavior of a query.  noCursorTimeout (boolean)  The server normally times out idle cursors after an inactivity period (10\nminutes) to prevent excess memory use. Set this option to prevent that.  oplogReplay (boolean)  Internal replication use only. The driver should not set this.  projection (document)  Limits the fields to return for the matching document.  readConcern (MongoDB\\Driver\\ReadConcern)  Read concern. \nFor servers   3.2, this option is ignored as read concern is not\navailable.  readPreference (MongoDB\\Driver\\ReadPreference)  Read preference.  skip (integer)  The number of documents to skip before returning.  sort (document)  The order in which to return matching documents. If  $orderby  also exists\nin the modifiers document, this option will take precedence.  typeMap (array)  Type map for BSON deserialization. This will be applied to the returned\nCursor (it is not sent to the server).   See Also   MongoDB\\Collection::findOne()  MongoDB Manual: find command", 
            "title": "find()"
        }, 
        {
            "location": "/classes/collection/#findone", 
            "text": "function findOne($filter = [], array $options = []): array|object  Finds a single document matching the query. Returns the matching document or\nnull.  Supported Options   comment (string)  Attaches a comment to the query. If  $comment  also exists in the modifiers\ndocument, this option will take precedence.  maxTimeMS (integer)  The maximum amount of time to allow the query to run. If  $maxTimeMS  also\nexists in the modifiers document, this option will take precedence.  modifiers (document)  Meta-operators modifying the output or behavior of a query.  projection (document)  Limits the fields to return for the matching document.  readConcern (MongoDB\\Driver\\ReadConcern)  Read concern. \nFor servers   3.2, this option is ignored as read concern is not available.  readPreference (MongoDB\\Driver\\ReadPreference)  Read preference.  skip (integer)  The number of documents to skip before returning.  sort (document)  The order in which to return matching documents. If  $orderby  also exists\nin the modifiers document, this option will take precedence.  typeMap (array)  Type map for BSON deserialization.   See Also   MongoDB\\Collection::find()  MongoDB Manual: find command", 
            "title": "findOne()"
        }, 
        {
            "location": "/classes/collection/#findoneanddelete", 
            "text": "function findOneAndDelete($filter, array $options = []): object|null  Finds a single document and deletes it, returning the original. The document to\nreturn may be null if no document matched the filter.  Note:  BSON deserialization of the returned document does not yet support a\ncustom type map. Support is pending new functionality in the driver.  Supported Options   maxTimeMS (integer)  The maximum amount of time to allow the query to run.  projection (document)  Limits the fields to return for the matching document.  sort (document)  Determines which document the operation modifies if the query selects\nmultiple documents.  writeConcern (MongoDB\\Driver\\WriteConcern)  Write concern. This option is only supported for server versions  = 3.2.   See Also   MongoDB\\Collection::findOneAndReplace()  MongoDB\\Collection::findOneAndUpdate()  MongoDB Manual: findAndModify command", 
            "title": "findOneAndDelete()"
        }, 
        {
            "location": "/classes/collection/#findoneandreplace", 
            "text": "function findOneAndReplace($filter, $replacement, array $options = []): object|null  Finds a single document and replaces it, returning either the original or the\nreplaced document.  The document to return may be null if no document matched the filter. By\ndefault, the original document is returned. Specify MongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_AFTER  for the returnDocument  option to return the updated document.  Note:  BSON deserialization of the returned document does not yet support a\ncustom type map. Support is pending new functionality in the driver.  Supported Options   bypassDocumentValidation (boolean)  If true, allows the write to opt out of document level validation.  maxTimeMS (integer)  The maximum amount of time to allow the query to run.  projection (document)  Limits the fields to return for the matching document.  returnDocument (enum)  Whether to return the document before or after the update is applied. Must\nbe either  MongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_BEFORE  or MongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_AFTER . The default is MongoDB\\Operation\\FindOneAndReplace::RETURN_DOCUMENT_BEFORE .  sort (document)  Determines which document the operation modifies if the query selects\nmultiple documents.  upsert (boolean)  When true, a new document is created if no document matches the query. The\ndefault is false.  writeConcern (MongoDB\\Driver\\WriteConcern)  Write concern. This option is only supported for server versions  = 3.2.   See Also   MongoDB\\Collection::findOneAndDelete()  MongoDB\\Collection::findOneAndUpdate()  MongoDB Manual: findAndModify command", 
            "title": "findOneAndReplace()"
        }, 
        {
            "location": "/classes/collection/#findoneandupdate", 
            "text": "function findOneAndUpdate($filter, $update, array $options = []): object|null  Finds a single document and updates it, returning either the original or the\nupdated document.  The document to return may be null if no document matched the filter. By\ndefault, the original document is returned. Specify MongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_AFTER  for the returnDocument  option to return the updated document.  Note:  BSON deserialization of the returned document does not yet support a\ncustom type map. Support is pending new functionality in the driver.  Supported Options   bypassDocumentValidation (boolean)  If true, allows the write to opt out of document level validation.  maxTimeMS (integer)  The maximum amount of time to allow the query to run.  projection (document)  Limits the fields to return for the matching document.  returnDocument (enum)  Whether to return the document before or after the update is applied. Must\nbe either  MongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_BEFORE  or MongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_AFTER . The default is MongoDB\\Operation\\FindOneAndUpdate::RETURN_DOCUMENT_BEFORE .  sort (document)  Determines which document the operation modifies if the query selects\nmultiple documents.  upsert (boolean)  When true, a new document is created if no document matches the query. The\ndefault is false.  writeConcern (MongoDB\\Driver\\WriteConcern)  Write concern. This option is only supported for server versions  = 3.2.   See Also   MongoDB\\Collection::findOneAndDelete()  MongoDB\\Collection::findOneAndReplace()  MongoDB Manual: findAndModify command", 
            "title": "findOneAndUpdate()"
        }, 
        {
            "location": "/classes/collection/#getcollectionname", 
            "text": "function getCollectionName(): string  Return the collection name.", 
            "title": "getCollectionName()"
        }, 
        {
            "location": "/classes/collection/#getdatabasename", 
            "text": "function getDatabaseName(): string  Return the database name.", 
            "title": "getDatabaseName()"
        }, 
        {
            "location": "/classes/collection/#getnamespace", 
            "text": "function getNamespace(): string  Return the collection namespace.  See Also   MongoDB Manual: namespace", 
            "title": "getNamespace()"
        }, 
        {
            "location": "/classes/collection/#insertmany", 
            "text": "function insertMany(array $documents, array $options = []): MongoDB\\InsertManyResult  Inserts multiple documents.  Supported Options   bypassDocumentValidation (boolean)  If true, allows the write to opt out of document level validation.  ordered (boolean)  If true, when an insert fails, return without performing the remaining\nwrites. If false, when a write fails, continue with the remaining writes, if\nany. The default is true.  writeConcern (MongoDB\\Driver\\WriteConcern)  Write concern.   See Also   MongoDB\\Collection::bulkWrite()  MongoDB\\Collection::insertOne()  Tutorial: CRUD Operations  MongoDB Manual: insert command", 
            "title": "insertMany()"
        }, 
        {
            "location": "/classes/collection/#insertone", 
            "text": "function insertOne($document, array $options = []): MongoDB\\InsertOneResult  Inserts one document.  Supported Options   bypassDocumentValidation (boolean)  If true, allows the write to opt out of document level validation.  writeConcern (MongoDB\\Driver\\WriteConcern)  Write concern.   See Also   MongoDB\\Collection::bulkWrite()  MongoDB\\Collection::insertMany()  Tutorial: CRUD Operations  MongoDB Manual: insert command", 
            "title": "insertOne()"
        }, 
        {
            "location": "/classes/collection/#listindexes", 
            "text": "function listIndexes(array $options = []): MongoDB\\Model\\IndexInfoIterator  Returns information for all indexes for the collection. Elements in the returned\niterator will be MongoDB\\Model\\IndexInfo objects.  Supported Options   maxTimeMS (integer)  The maximum amount of time to allow the query to run.   See Also   Tutorial: Indexes  MongoDB Manual: listIndexes command  MongoDB Manual: Indexes  MongoDB Specification: Enumerating Collections", 
            "title": "listIndexes()"
        }, 
        {
            "location": "/classes/collection/#replaceone", 
            "text": "function replaceOne($filter, $replacement, array $options = []): MongoDB\\UpdateResult  Replaces at most one document matching the filter.  Supported Options   bypassDocumentValidation (boolean)  If true, allows the write to opt out of document level validation.  upsert (boolean)  When true, a new document is created if no document matches the query. The\ndefault is false.  writeConcern (MongoDB\\Driver\\WriteConcern)  Write concern.   See Also   MongoDB\\Collection::bulkWrite()  MongoDB\\Collection::updateMany()  MongoDB\\Collection::updateOne()  Tutorial: CRUD Operations  MongoDB Manual: update command", 
            "title": "replaceOne()"
        }, 
        {
            "location": "/classes/collection/#updatemany", 
            "text": "function updateMany($filter, $update, array $options = []): MongoDB\\UpdateResult  Updates all documents matching the filter.  Supported Options   bypassDocumentValidation (boolean)  If true, allows the write to opt out of document level validation.  upsert (boolean)  When true, a new document is created if no document matches the query. The\ndefault is false.  writeConcern (MongoDB\\Driver\\WriteConcern)  Write concern.   See Also   MongoDB\\Collection::bulkWrite()  MongoDB\\Collection::replaceOne()  MongoDB\\Collection::updateOne()  Tutorial: CRUD Operations  MongoDB Manual: update command", 
            "title": "updateMany()"
        }, 
        {
            "location": "/classes/collection/#updateone", 
            "text": "function updateOne($filter, $update, array $options = []): MongoDB\\UpdateResult  Updates at most one document matching the filter.  Supported Options   bypassDocumentValidation (boolean)  If true, allows the write to opt out of document level validation.  upsert (boolean)  When true, a new document is created if no document matches the query. The\ndefault is false.  writeConcern (MongoDB\\Driver\\WriteConcern)  Write concern.   See Also   MongoDB\\Collection::bulkWrite()  MongoDB\\Collection::replaceOne()  MongoDB\\Collection::updateMany()  Tutorial: CRUD Operations  MongoDB Manual: update command", 
            "title": "updateOne()"
        }, 
        {
            "location": "/classes/collection/#withoptions", 
            "text": "function withOptions(array $options = []): MongoDB\\Collection  Returns a clone of this Collection with different options.  Supported Options   readConcern (MongoDB\\Driver\\ReadConcern)  The default read concern to use for collection operations. Defaults to the\nManager s read concern.  readPreference (MongoDB\\Driver\\ReadPreference)  The default read preference to use for collection operations. Defaults to\nthe Manager s read preference.  typeMap (array)  Default type map for cursors and BSON documents.  writeConcern (MongoDB\\Driver\\WriteConcern)  The default write concern to use for collection operations. Defaults to the\nManager s write concern.   See Also   MongoDB\\Collection::__construct()", 
            "title": "withOptions()"
        }
    ]
}